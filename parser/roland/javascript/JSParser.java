/* Generated By:JavaCC: Do not edit this line. JSParser.java */
package roland.javascript;

import java.util.Vector;

public class JSParser implements JSParserConstants {

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public JSStatement Program() throws ParseError {
         JSCompoundStatement p = new JSCompoundStatement(new Token());
  JSStatement s;
    label_1:
    while (true) {
      if (jj_mask_0[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[0] = jj_gen;
        break label_1;
      }
      s = Element();
                                         p.add(s);
    }
    jj_consume_token(0);
                                         return p;
  }

  static boolean[] jj_mask_0 = new boolean[122];
  static {
    jj_mask_0[BREAK] =
    jj_mask_0[CONTINUE] =
    jj_mask_0[DELETE] =
    jj_mask_0[FOR] =
    jj_mask_0[FUNCTION] =
    jj_mask_0[IF] =
    jj_mask_0[NEW] =
    jj_mask_0[RETURN] =
    jj_mask_0[THIS] =
    jj_mask_0[VAR] =
    jj_mask_0[WHILE] =
    jj_mask_0[WITH] =
    jj_mask_0[INTEGER_LITERAL] =
    jj_mask_0[FLOATING_POINT_LITERAL] =
    jj_mask_0[STRING_LITERAL] =
    jj_mask_0[BOOLEAN_LITERAL] =
    jj_mask_0[NULL_LITERAL] =
    jj_mask_0[IDENTIFIER] =
    jj_mask_0[LPAREN] =
    jj_mask_0[LBRACE] =
    jj_mask_0[SEMICOLON] =
    jj_mask_0[BANG] =
    jj_mask_0[TILDE] =
    jj_mask_0[INCR] =
    jj_mask_0[DECR] =
    jj_mask_0[MINUS] = true;
  }
  
  final public JSStatement Element() throws ParseError {
         JSStatement s = null;
  Token t;
  Token t2;
  Vector v = null;
    if (jj_mask_3[getToken(1).kind]) {
      t = jj_consume_token(FUNCTION);
      t2 = jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      if (jj_mask_2[getToken(1).kind]) {
        v = ParameterList();
      } else {
        jj_expLA1[2] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      s = CompoundStatement();
                                         if( v == null) {
                                         v = new Vector();
                                  }
                                  s = new JSFuncDeclStatement( t, t2.image, v, s);
    } else {
      jj_expLA1[3] = jj_gen;
      if (jj_mask_1[getToken(1).kind]) {
        s = Statement();
      } else {
        jj_expLA1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
                                         return s;
  }

  static boolean[] jj_mask_1 = new boolean[122];
  static {
    jj_mask_1[BREAK] =
    jj_mask_1[CONTINUE] =
    jj_mask_1[DELETE] =
    jj_mask_1[FOR] =
    jj_mask_1[IF] =
    jj_mask_1[NEW] =
    jj_mask_1[RETURN] =
    jj_mask_1[THIS] =
    jj_mask_1[VAR] =
    jj_mask_1[WHILE] =
    jj_mask_1[WITH] =
    jj_mask_1[INTEGER_LITERAL] =
    jj_mask_1[FLOATING_POINT_LITERAL] =
    jj_mask_1[STRING_LITERAL] =
    jj_mask_1[BOOLEAN_LITERAL] =
    jj_mask_1[NULL_LITERAL] =
    jj_mask_1[IDENTIFIER] =
    jj_mask_1[LPAREN] =
    jj_mask_1[LBRACE] =
    jj_mask_1[SEMICOLON] =
    jj_mask_1[BANG] =
    jj_mask_1[TILDE] =
    jj_mask_1[INCR] =
    jj_mask_1[DECR] =
    jj_mask_1[MINUS] = true;
  }
  static boolean[] jj_mask_2 = new boolean[122];
  static {
    jj_mask_2[IDENTIFIER] = true;
  }
  static boolean[] jj_mask_3 = new boolean[122];
  static {
    jj_mask_3[FUNCTION] = true;
  }
  
// Returns a Vector of strings, one for each identifier.
  final public Vector ParameterList() throws ParseError {
         Token t;
         Vector v = new Vector();
    t = jj_consume_token(IDENTIFIER);
                                         v.addElement(t.image);
    label_2:
    while (true) {
      if (jj_mask_4[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(IDENTIFIER);
                                         v.addElement(t.image);
    }
                                         return v;
  }

  static boolean[] jj_mask_4 = new boolean[122];
  static {
    jj_mask_4[COMMA] = true;
  }
  
  final public JSCompoundStatement CompoundStatement() throws ParseError {
         Token t;
         JSCompoundStatement stmts;
  JSStatement stmt;
    t = jj_consume_token(LBRACE);
                                         stmts = new JSCompoundStatement(t);
    label_3:
    while (true) {
      if (jj_mask_5[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[5] = jj_gen;
        break label_3;
      }
      stmt = Statement();
                                         stmts.add(stmt);
    }
    jj_consume_token(RBRACE);
                                  return stmts;
  }

  static boolean[] jj_mask_5 = new boolean[122];
  static {
    jj_mask_5[BREAK] =
    jj_mask_5[CONTINUE] =
    jj_mask_5[DELETE] =
    jj_mask_5[FOR] =
    jj_mask_5[IF] =
    jj_mask_5[NEW] =
    jj_mask_5[RETURN] =
    jj_mask_5[THIS] =
    jj_mask_5[VAR] =
    jj_mask_5[WHILE] =
    jj_mask_5[WITH] =
    jj_mask_5[INTEGER_LITERAL] =
    jj_mask_5[FLOATING_POINT_LITERAL] =
    jj_mask_5[STRING_LITERAL] =
    jj_mask_5[BOOLEAN_LITERAL] =
    jj_mask_5[NULL_LITERAL] =
    jj_mask_5[IDENTIFIER] =
    jj_mask_5[LPAREN] =
    jj_mask_5[LBRACE] =
    jj_mask_5[SEMICOLON] =
    jj_mask_5[BANG] =
    jj_mask_5[TILDE] =
    jj_mask_5[INCR] =
    jj_mask_5[DECR] =
    jj_mask_5[MINUS] = true;
  }
  
// The spec requires ";" after expressions, variables declarations, break,
//   continue and return. I've ignored that here.
  final public JSStatement Statement() throws ParseError {
         Token t;
         JSStatement stmt;
  JSExpression e1=null;
  JSExpression e2=null;
  JSExpression e3=null;
  JSStatement s1=null;
  JSStatement s2=null;
    if (jj_mask_21[getToken(1).kind]) {
      t = jj_consume_token(SEMICOLON);
                                  stmt = new JSEmptyStatement(t);
    } else {
      jj_expLA1[21] = jj_gen;
      if (jj_mask_20[getToken(1).kind]) {
        t = jj_consume_token(IF);
        e1 = Condition();
        s1 = Statement();
        if (jj_mask_19[getToken(1).kind]) {
          jj_consume_token(ELSE);
          s2 = Statement();
        } else {
          jj_expLA1[19] = jj_gen;
          ;
        }
                                  stmt = new JSIfStatement(t, e1, s1, s2);
      } else {
        jj_expLA1[20] = jj_gen;
        if (jj_mask_18[getToken(1).kind]) {
          t = jj_consume_token(WHILE);
          e1 = Condition();
          s1 = Statement();
                                  stmt = new JSWhileStatement( t, e1, s1);
        } else {
          jj_expLA1[18] = jj_gen;
          if (jj_2_2(3)) {
            t = jj_consume_token(FOR);
            jj_consume_token(LPAREN);
            jj_consume_token(SEMICOLON);
            if (jj_mask_16[getToken(1).kind]) {
              e2 = Expression();
            } else {
              jj_expLA1[16] = jj_gen;
              ;
            }
            jj_consume_token(SEMICOLON);
            if (jj_mask_17[getToken(1).kind]) {
              e3 = Expression();
            } else {
              jj_expLA1[17] = jj_gen;
              ;
            }
            jj_consume_token(RPAREN);
            s1 = Statement();
                                  stmt = new JSForStatement( t, e1, e2, e3, s1);
          } else {
            if (jj_2_1(2147483647)) {
              t = jj_consume_token(FOR);
              jj_consume_token(LPAREN);
              e1 = VariablesOrExpression();
              jj_consume_token(SEMICOLON);
              if (jj_mask_14[getToken(1).kind]) {
                e2 = Expression();
              } else {
                jj_expLA1[14] = jj_gen;
                ;
              }
              jj_consume_token(SEMICOLON);
              if (jj_mask_15[getToken(1).kind]) {
                e3 = Expression();
              } else {
                jj_expLA1[15] = jj_gen;
                ;
              }
              jj_consume_token(RPAREN);
              s1 = Statement();
                                  stmt = new JSForStatement( t, e1, e2, e3, s1);
            } else {
              if (jj_mask_13[getToken(1).kind]) {
                t = jj_consume_token(FOR);
                jj_consume_token(LPAREN);
                VariablesOrExpression();
                jj_consume_token(IN);
                Expression();
                jj_consume_token(RPAREN);
                Statement();
                                  // ### still to do
                                  stmt = null;
              } else {
                jj_expLA1[13] = jj_gen;
                if (jj_mask_12[getToken(1).kind]) {
                  t = jj_consume_token(BREAK);
                                  stmt = new JSBreakStatement(t);
                } else {
                  jj_expLA1[12] = jj_gen;
                  if (jj_mask_11[getToken(1).kind]) {
                    t = jj_consume_token(CONTINUE);
                                  stmt = new JSContinueStatement(t);
                  } else {
                    jj_expLA1[11] = jj_gen;
                    if (jj_mask_10[getToken(1).kind]) {
                      t = jj_consume_token(WITH);
                      jj_consume_token(LPAREN);
                      e1 = Expression();
                      jj_consume_token(RPAREN);
                      s1 = Statement();
                                  // ### still to do
                                  stmt = null;
                    } else {
                      jj_expLA1[10] = jj_gen;
                      if (jj_mask_9[getToken(1).kind]) {
                        t = jj_consume_token(RETURN);
                        if (jj_mask_8[getToken(1).kind]) {
                          e1 = Expression();
                        } else {
                          jj_expLA1[8] = jj_gen;
                          ;
                        }
                                  stmt = new JSReturnStatement(t, e1);
                      } else {
                        jj_expLA1[9] = jj_gen;
                        if (jj_mask_7[getToken(1).kind]) {
                          stmt = CompoundStatement();
                        } else {
                          jj_expLA1[7] = jj_gen;
                          if (jj_mask_6[getToken(1).kind]) {
                            stmt = VariablesOrExpression();
                          } else {
                            jj_expLA1[6] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseError();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
                                         return stmt;
  }

  static boolean[] jj_mask_6 = new boolean[122];
  static {
    jj_mask_6[DELETE] =
    jj_mask_6[NEW] =
    jj_mask_6[THIS] =
    jj_mask_6[VAR] =
    jj_mask_6[INTEGER_LITERAL] =
    jj_mask_6[FLOATING_POINT_LITERAL] =
    jj_mask_6[STRING_LITERAL] =
    jj_mask_6[BOOLEAN_LITERAL] =
    jj_mask_6[NULL_LITERAL] =
    jj_mask_6[IDENTIFIER] =
    jj_mask_6[LPAREN] =
    jj_mask_6[BANG] =
    jj_mask_6[TILDE] =
    jj_mask_6[INCR] =
    jj_mask_6[DECR] =
    jj_mask_6[MINUS] = true;
  }
  static boolean[] jj_mask_7 = new boolean[122];
  static {
    jj_mask_7[LBRACE] = true;
  }
  static boolean[] jj_mask_8 = new boolean[122];
  static {
    jj_mask_8[DELETE] =
    jj_mask_8[NEW] =
    jj_mask_8[THIS] =
    jj_mask_8[INTEGER_LITERAL] =
    jj_mask_8[FLOATING_POINT_LITERAL] =
    jj_mask_8[STRING_LITERAL] =
    jj_mask_8[BOOLEAN_LITERAL] =
    jj_mask_8[NULL_LITERAL] =
    jj_mask_8[IDENTIFIER] =
    jj_mask_8[LPAREN] =
    jj_mask_8[BANG] =
    jj_mask_8[TILDE] =
    jj_mask_8[INCR] =
    jj_mask_8[DECR] =
    jj_mask_8[MINUS] = true;
  }
  static boolean[] jj_mask_9 = new boolean[122];
  static {
    jj_mask_9[RETURN] = true;
  }
  static boolean[] jj_mask_10 = new boolean[122];
  static {
    jj_mask_10[WITH] = true;
  }
  static boolean[] jj_mask_11 = new boolean[122];
  static {
    jj_mask_11[CONTINUE] = true;
  }
  static boolean[] jj_mask_12 = new boolean[122];
  static {
    jj_mask_12[BREAK] = true;
  }
  static boolean[] jj_mask_13 = new boolean[122];
  static {
    jj_mask_13[FOR] = true;
  }
  static boolean[] jj_mask_14 = new boolean[122];
  static {
    jj_mask_14[DELETE] =
    jj_mask_14[NEW] =
    jj_mask_14[THIS] =
    jj_mask_14[INTEGER_LITERAL] =
    jj_mask_14[FLOATING_POINT_LITERAL] =
    jj_mask_14[STRING_LITERAL] =
    jj_mask_14[BOOLEAN_LITERAL] =
    jj_mask_14[NULL_LITERAL] =
    jj_mask_14[IDENTIFIER] =
    jj_mask_14[LPAREN] =
    jj_mask_14[BANG] =
    jj_mask_14[TILDE] =
    jj_mask_14[INCR] =
    jj_mask_14[DECR] =
    jj_mask_14[MINUS] = true;
  }
  static boolean[] jj_mask_15 = new boolean[122];
  static {
    jj_mask_15[DELETE] =
    jj_mask_15[NEW] =
    jj_mask_15[THIS] =
    jj_mask_15[INTEGER_LITERAL] =
    jj_mask_15[FLOATING_POINT_LITERAL] =
    jj_mask_15[STRING_LITERAL] =
    jj_mask_15[BOOLEAN_LITERAL] =
    jj_mask_15[NULL_LITERAL] =
    jj_mask_15[IDENTIFIER] =
    jj_mask_15[LPAREN] =
    jj_mask_15[BANG] =
    jj_mask_15[TILDE] =
    jj_mask_15[INCR] =
    jj_mask_15[DECR] =
    jj_mask_15[MINUS] = true;
  }
  static boolean[] jj_mask_16 = new boolean[122];
  static {
    jj_mask_16[DELETE] =
    jj_mask_16[NEW] =
    jj_mask_16[THIS] =
    jj_mask_16[INTEGER_LITERAL] =
    jj_mask_16[FLOATING_POINT_LITERAL] =
    jj_mask_16[STRING_LITERAL] =
    jj_mask_16[BOOLEAN_LITERAL] =
    jj_mask_16[NULL_LITERAL] =
    jj_mask_16[IDENTIFIER] =
    jj_mask_16[LPAREN] =
    jj_mask_16[BANG] =
    jj_mask_16[TILDE] =
    jj_mask_16[INCR] =
    jj_mask_16[DECR] =
    jj_mask_16[MINUS] = true;
  }
  static boolean[] jj_mask_17 = new boolean[122];
  static {
    jj_mask_17[DELETE] =
    jj_mask_17[NEW] =
    jj_mask_17[THIS] =
    jj_mask_17[INTEGER_LITERAL] =
    jj_mask_17[FLOATING_POINT_LITERAL] =
    jj_mask_17[STRING_LITERAL] =
    jj_mask_17[BOOLEAN_LITERAL] =
    jj_mask_17[NULL_LITERAL] =
    jj_mask_17[IDENTIFIER] =
    jj_mask_17[LPAREN] =
    jj_mask_17[BANG] =
    jj_mask_17[TILDE] =
    jj_mask_17[INCR] =
    jj_mask_17[DECR] =
    jj_mask_17[MINUS] = true;
  }
  static boolean[] jj_mask_18 = new boolean[122];
  static {
    jj_mask_18[WHILE] = true;
  }
  static boolean[] jj_mask_19 = new boolean[122];
  static {
    jj_mask_19[ELSE] = true;
  }
  static boolean[] jj_mask_20 = new boolean[122];
  static {
    jj_mask_20[IF] = true;
  }
  static boolean[] jj_mask_21 = new boolean[122];
  static {
    jj_mask_21[SEMICOLON] = true;
  }
  
  final public JSExpression Condition() throws ParseError {
  JSExpression e = null;
    jj_consume_token(LPAREN);
    e = Expression();
    jj_consume_token(RPAREN);
                                  return e;
  }

// ### Check up on the semantics of this - not sure whether it should be statement
//		or expression
  final public JSExpression VariablesOrExpression() throws ParseError {
         Token t;
         JSExpression e = null;
  Vector v = null;
    if (jj_mask_23[getToken(1).kind]) {
      t = jj_consume_token(VAR);
      v = Variables();
                                         e = new JSVarDeclExpression(t, v);
    } else {
      jj_expLA1[23] = jj_gen;
      if (jj_mask_22[getToken(1).kind]) {
        e = Expression();
      } else {
        jj_expLA1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
                                  return e;
  }

  static boolean[] jj_mask_22 = new boolean[122];
  static {
    jj_mask_22[DELETE] =
    jj_mask_22[NEW] =
    jj_mask_22[THIS] =
    jj_mask_22[INTEGER_LITERAL] =
    jj_mask_22[FLOATING_POINT_LITERAL] =
    jj_mask_22[STRING_LITERAL] =
    jj_mask_22[BOOLEAN_LITERAL] =
    jj_mask_22[NULL_LITERAL] =
    jj_mask_22[IDENTIFIER] =
    jj_mask_22[LPAREN] =
    jj_mask_22[BANG] =
    jj_mask_22[TILDE] =
    jj_mask_22[INCR] =
    jj_mask_22[DECR] =
    jj_mask_22[MINUS] = true;
  }
  static boolean[] jj_mask_23 = new boolean[122];
  static {
    jj_mask_23[VAR] = true;
  }
  
// Vector of JSVarDecl's
  final public Vector Variables() throws ParseError {
         Vector v = new Vector();
  JSVarDecl d;
    d = Variable();
                                         v.addElement(d);
    label_4:
    while (true) {
      if (jj_mask_24[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[24] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      d = Variable();
                                         v.addElement(d);
    }
                                         return v;
  }

  static boolean[] jj_mask_24 = new boolean[122];
  static {
    jj_mask_24[COMMA] = true;
  }
  
  final public JSVarDecl Variable() throws ParseError {
         Token t;
  JSExpression e = null;
    t = jj_consume_token(IDENTIFIER);
    if (jj_mask_25[getToken(1).kind]) {
      jj_consume_token(ASSIGN);
      e = AssignmentExpression();
    } else {
      jj_expLA1[25] = jj_gen;
      ;
    }
                                  return new JSVarDecl(t, e);
  }

  static boolean[] jj_mask_25 = new boolean[122];
  static {
    jj_mask_25[ASSIGN] = true;
  }
  
  final public JSExpression Expression() throws ParseError {
         Token t;
  JSExpression e = null;
  JSExpression e2;
    e = AssignmentExpression();
    label_5:
    while (true) {
      if (jj_mask_26[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[26] = jj_gen;
        break label_5;
      }
      t = jj_consume_token(COMMA);
      e2 = AssignmentExpression();
                                         e = new JSBinaryExpression( t, e, e2);
    }
                                  return e;
  }

  static boolean[] jj_mask_26 = new boolean[122];
  static {
    jj_mask_26[COMMA] = true;
  }
  
  final public JSExpression AssignmentExpression() throws ParseError {
         Token t;
  JSExpression e = null;
  JSExpression e2;
    e = ConditionalExpression();
    label_6:
    while (true) {
      if (jj_mask_27[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[27] = jj_gen;
        break label_6;
      }
      if (jj_mask_41[getToken(1).kind]) {
        t = jj_consume_token(ASSIGN);
      } else {
        jj_expLA1[41] = jj_gen;
        if (jj_mask_40[getToken(1).kind]) {
          t = jj_consume_token(SC_ANDASSIGN);
        } else {
          jj_expLA1[40] = jj_gen;
          if (jj_mask_39[getToken(1).kind]) {
            t = jj_consume_token(SC_ORASSIGN);
          } else {
            jj_expLA1[39] = jj_gen;
            if (jj_mask_38[getToken(1).kind]) {
              t = jj_consume_token(PLUSASSIGN);
            } else {
              jj_expLA1[38] = jj_gen;
              if (jj_mask_37[getToken(1).kind]) {
                t = jj_consume_token(MINUSASSIGN);
              } else {
                jj_expLA1[37] = jj_gen;
                if (jj_mask_36[getToken(1).kind]) {
                  t = jj_consume_token(STARASSIGN);
                } else {
                  jj_expLA1[36] = jj_gen;
                  if (jj_mask_35[getToken(1).kind]) {
                    t = jj_consume_token(SLASHASSIGN);
                  } else {
                    jj_expLA1[35] = jj_gen;
                    if (jj_mask_34[getToken(1).kind]) {
                      t = jj_consume_token(BIT_ANDASSIGN);
                    } else {
                      jj_expLA1[34] = jj_gen;
                      if (jj_mask_33[getToken(1).kind]) {
                        t = jj_consume_token(BIT_ORASSIGN);
                      } else {
                        jj_expLA1[33] = jj_gen;
                        if (jj_mask_32[getToken(1).kind]) {
                          t = jj_consume_token(XORASSIGN);
                        } else {
                          jj_expLA1[32] = jj_gen;
                          if (jj_mask_31[getToken(1).kind]) {
                            t = jj_consume_token(REMASSIGN);
                          } else {
                            jj_expLA1[31] = jj_gen;
                            if (jj_mask_30[getToken(1).kind]) {
                              t = jj_consume_token(LSHIFTASSIGN);
                            } else {
                              jj_expLA1[30] = jj_gen;
                              if (jj_mask_29[getToken(1).kind]) {
                                t = jj_consume_token(RSIGNEDSHIFTASSIGN);
                              } else {
                                jj_expLA1[29] = jj_gen;
                                if (jj_mask_28[getToken(1).kind]) {
                                  t = jj_consume_token(RUNSIGNEDSHIFTASSIGN);
                                } else {
                                  jj_expLA1[28] = jj_gen;
                                  jj_consume_token(-1);
                                  throw new ParseError();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      e2 = ConditionalExpression();
                                         e = new JSBinaryExpression( t, e, e2);
    }
                                  return e;
  }

  static boolean[] jj_mask_27 = new boolean[122];
  static {
    jj_mask_27[ASSIGN] =
    jj_mask_27[SC_ORASSIGN] =
    jj_mask_27[SC_ANDASSIGN] =
    jj_mask_27[PLUSASSIGN] =
    jj_mask_27[MINUSASSIGN] =
    jj_mask_27[STARASSIGN] =
    jj_mask_27[SLASHASSIGN] =
    jj_mask_27[BIT_ANDASSIGN] =
    jj_mask_27[BIT_ORASSIGN] =
    jj_mask_27[XORASSIGN] =
    jj_mask_27[REMASSIGN] =
    jj_mask_27[LSHIFTASSIGN] =
    jj_mask_27[RSIGNEDSHIFTASSIGN] =
    jj_mask_27[RUNSIGNEDSHIFTASSIGN] = true;
  }
  static boolean[] jj_mask_28 = new boolean[122];
  static {
    jj_mask_28[RUNSIGNEDSHIFTASSIGN] = true;
  }
  static boolean[] jj_mask_29 = new boolean[122];
  static {
    jj_mask_29[RSIGNEDSHIFTASSIGN] = true;
  }
  static boolean[] jj_mask_30 = new boolean[122];
  static {
    jj_mask_30[LSHIFTASSIGN] = true;
  }
  static boolean[] jj_mask_31 = new boolean[122];
  static {
    jj_mask_31[REMASSIGN] = true;
  }
  static boolean[] jj_mask_32 = new boolean[122];
  static {
    jj_mask_32[XORASSIGN] = true;
  }
  static boolean[] jj_mask_33 = new boolean[122];
  static {
    jj_mask_33[BIT_ORASSIGN] = true;
  }
  static boolean[] jj_mask_34 = new boolean[122];
  static {
    jj_mask_34[BIT_ANDASSIGN] = true;
  }
  static boolean[] jj_mask_35 = new boolean[122];
  static {
    jj_mask_35[SLASHASSIGN] = true;
  }
  static boolean[] jj_mask_36 = new boolean[122];
  static {
    jj_mask_36[STARASSIGN] = true;
  }
  static boolean[] jj_mask_37 = new boolean[122];
  static {
    jj_mask_37[MINUSASSIGN] = true;
  }
  static boolean[] jj_mask_38 = new boolean[122];
  static {
    jj_mask_38[PLUSASSIGN] = true;
  }
  static boolean[] jj_mask_39 = new boolean[122];
  static {
    jj_mask_39[SC_ORASSIGN] = true;
  }
  static boolean[] jj_mask_40 = new boolean[122];
  static {
    jj_mask_40[SC_ANDASSIGN] = true;
  }
  static boolean[] jj_mask_41 = new boolean[122];
  static {
    jj_mask_41[ASSIGN] = true;
  }
  
  final public JSExpression ConditionalExpression() throws ParseError {
         Token t;
  JSExpression e = null;
  JSExpression e2;
  JSExpression e3;
    e = OrExpression();
    if (jj_mask_42[getToken(1).kind]) {
      t = jj_consume_token(HOOK);
      e2 = AssignmentExpression();
      jj_consume_token(COLON);
      e3 = AssignmentExpression();
                                         e = new JSConditionalExpression( t, e, e2, e3);
    } else {
      jj_expLA1[42] = jj_gen;
      ;
    }
                                  return e;
  }

  static boolean[] jj_mask_42 = new boolean[122];
  static {
    jj_mask_42[HOOK] = true;
  }
  
  final public JSExpression OrExpression() throws ParseError {
         Token t;
  JSExpression e = null;
  JSExpression e2;
    e = AndExpression();
    label_7:
    while (true) {
      if (jj_mask_43[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[43] = jj_gen;
        break label_7;
      }
      t = jj_consume_token(SC_OR);
      e2 = AndExpression();
                                         e = new JSBinaryExpression( t, e, e2);
    }
                                  return e;
  }

  static boolean[] jj_mask_43 = new boolean[122];
  static {
    jj_mask_43[SC_OR] = true;
  }
  
  final public JSExpression AndExpression() throws ParseError {
         Token t;
  JSExpression e = null;
  JSExpression e2;
    e = BitwiseOrExpression();
    label_8:
    while (true) {
      if (jj_mask_44[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[44] = jj_gen;
        break label_8;
      }
      t = jj_consume_token(SC_AND);
      e2 = BitwiseOrExpression();
                                         e = new JSBinaryExpression( t, e, e2);
    }
                                  return e;
  }

  static boolean[] jj_mask_44 = new boolean[122];
  static {
    jj_mask_44[SC_AND] = true;
  }
  
  final public JSExpression BitwiseOrExpression() throws ParseError {
         Token t;
  JSExpression e = null;
  JSExpression e2;
    e = BitwiseXorExpression();
    label_9:
    while (true) {
      if (jj_mask_45[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[45] = jj_gen;
        break label_9;
      }
      t = jj_consume_token(BIT_OR);
      e2 = BitwiseXorExpression();
                                         e = new JSBinaryExpression( t, e, e2);
    }
                                  return e;
  }

  static boolean[] jj_mask_45 = new boolean[122];
  static {
    jj_mask_45[BIT_OR] = true;
  }
  
  final public JSExpression BitwiseXorExpression() throws ParseError {
         Token t;
  JSExpression e = null;
  JSExpression e2;
    e = BitwiseAndExpression();
    label_10:
    while (true) {
      if (jj_mask_46[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[46] = jj_gen;
        break label_10;
      }
      t = jj_consume_token(XOR);
      e2 = BitwiseAndExpression();
                                         e = new JSBinaryExpression( t, e, e2);
    }
                                  return e;
  }

  static boolean[] jj_mask_46 = new boolean[122];
  static {
    jj_mask_46[XOR] = true;
  }
  
  final public JSExpression BitwiseAndExpression() throws ParseError {
         Token t;
  JSExpression e = null;
  JSExpression e2;
    e = EqualityExpression();
    label_11:
    while (true) {
      if (jj_mask_47[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[47] = jj_gen;
        break label_11;
      }
      t = jj_consume_token(BIT_AND);
      e2 = EqualityExpression();
                                         e = new JSBinaryExpression( t, e, e2);
    }
                                  return e;
  }

  static boolean[] jj_mask_47 = new boolean[122];
  static {
    jj_mask_47[BIT_AND] = true;
  }
  
  final public JSExpression EqualityExpression() throws ParseError {
         Token t;
  JSExpression e = null;
  JSExpression e2;
    e = RelationalExpression();
    label_12:
    while (true) {
      if (jj_mask_48[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[48] = jj_gen;
        break label_12;
      }
      if (jj_mask_50[getToken(1).kind]) {
        t = jj_consume_token(EQ);
      } else {
        jj_expLA1[50] = jj_gen;
        if (jj_mask_49[getToken(1).kind]) {
          t = jj_consume_token(NE);
        } else {
          jj_expLA1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseError();
        }
      }
      e2 = RelationalExpression();
                                         e = new JSBinaryExpression( t, e, e2);
    }
                                  return e;
  }

  static boolean[] jj_mask_48 = new boolean[122];
  static {
    jj_mask_48[EQ] =
    jj_mask_48[NE] = true;
  }
  static boolean[] jj_mask_49 = new boolean[122];
  static {
    jj_mask_49[NE] = true;
  }
  static boolean[] jj_mask_50 = new boolean[122];
  static {
    jj_mask_50[EQ] = true;
  }
  
  final public JSExpression RelationalExpression() throws ParseError {
         Token t;
  JSExpression e = null;
  JSExpression e2;
    e = ShiftExpression();
    label_13:
    while (true) {
      if (jj_mask_51[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[51] = jj_gen;
        break label_13;
      }
      if (jj_mask_55[getToken(1).kind]) {
        t = jj_consume_token(LT);
      } else {
        jj_expLA1[55] = jj_gen;
        if (jj_mask_54[getToken(1).kind]) {
          t = jj_consume_token(GT);
        } else {
          jj_expLA1[54] = jj_gen;
          if (jj_mask_53[getToken(1).kind]) {
            t = jj_consume_token(LE);
          } else {
            jj_expLA1[53] = jj_gen;
            if (jj_mask_52[getToken(1).kind]) {
              t = jj_consume_token(GE);
            } else {
              jj_expLA1[52] = jj_gen;
              jj_consume_token(-1);
              throw new ParseError();
            }
          }
        }
      }
      e2 = ShiftExpression();
                                         e = new JSBinaryExpression( t, e, e2);
    }
                                  return e;
  }

  static boolean[] jj_mask_51 = new boolean[122];
  static {
    jj_mask_51[GT] =
    jj_mask_51[LT] =
    jj_mask_51[LE] =
    jj_mask_51[GE] = true;
  }
  static boolean[] jj_mask_52 = new boolean[122];
  static {
    jj_mask_52[GE] = true;
  }
  static boolean[] jj_mask_53 = new boolean[122];
  static {
    jj_mask_53[LE] = true;
  }
  static boolean[] jj_mask_54 = new boolean[122];
  static {
    jj_mask_54[GT] = true;
  }
  static boolean[] jj_mask_55 = new boolean[122];
  static {
    jj_mask_55[LT] = true;
  }
  
  final public JSExpression ShiftExpression() throws ParseError {
         Token t;
  JSExpression e = null;
  JSExpression e2;
    e = AdditiveExpression();
    label_14:
    while (true) {
      if (jj_mask_56[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[56] = jj_gen;
        break label_14;
      }
      if (jj_mask_59[getToken(1).kind]) {
        t = jj_consume_token(LSHIFT);
      } else {
        jj_expLA1[59] = jj_gen;
        if (jj_mask_58[getToken(1).kind]) {
          t = jj_consume_token(RSIGNEDSHIFT);
        } else {
          jj_expLA1[58] = jj_gen;
          if (jj_mask_57[getToken(1).kind]) {
            t = jj_consume_token(RUNSIGNEDSHIFT);
          } else {
            jj_expLA1[57] = jj_gen;
            jj_consume_token(-1);
            throw new ParseError();
          }
        }
      }
      e2 = AdditiveExpression();
                                         e = new JSBinaryExpression( t, e, e2);
    }
                                  return e;
  }

  static boolean[] jj_mask_56 = new boolean[122];
  static {
    jj_mask_56[LSHIFT] =
    jj_mask_56[RSIGNEDSHIFT] =
    jj_mask_56[RUNSIGNEDSHIFT] = true;
  }
  static boolean[] jj_mask_57 = new boolean[122];
  static {
    jj_mask_57[RUNSIGNEDSHIFT] = true;
  }
  static boolean[] jj_mask_58 = new boolean[122];
  static {
    jj_mask_58[RSIGNEDSHIFT] = true;
  }
  static boolean[] jj_mask_59 = new boolean[122];
  static {
    jj_mask_59[LSHIFT] = true;
  }
  
  final public JSExpression AdditiveExpression() throws ParseError {
         Token t;
  JSExpression e = null;
  JSExpression e2;
    e = MultiplicativeExpression();
    label_15:
    while (true) {
      if (jj_mask_60[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[60] = jj_gen;
        break label_15;
      }
      if (jj_mask_62[getToken(1).kind]) {
        t = jj_consume_token(PLUS);
      } else {
        jj_expLA1[62] = jj_gen;
        if (jj_mask_61[getToken(1).kind]) {
          t = jj_consume_token(MINUS);
        } else {
          jj_expLA1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseError();
        }
      }
      e2 = MultiplicativeExpression();
                                         e = new JSBinaryExpression( t, e, e2);
    }
                                  return e;
  }

  static boolean[] jj_mask_60 = new boolean[122];
  static {
    jj_mask_60[PLUS] =
    jj_mask_60[MINUS] = true;
  }
  static boolean[] jj_mask_61 = new boolean[122];
  static {
    jj_mask_61[MINUS] = true;
  }
  static boolean[] jj_mask_62 = new boolean[122];
  static {
    jj_mask_62[PLUS] = true;
  }
  
  final public JSExpression MultiplicativeExpression() throws ParseError {
         Token t;
  JSExpression e = null;
  JSExpression e2;
    e = UnaryExpression();
    label_16:
    while (true) {
      if (jj_mask_63[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[63] = jj_gen;
        break label_16;
      }
      if (jj_mask_66[getToken(1).kind]) {
        t = jj_consume_token(STAR);
      } else {
        jj_expLA1[66] = jj_gen;
        if (jj_mask_65[getToken(1).kind]) {
          t = jj_consume_token(SLASH);
        } else {
          jj_expLA1[65] = jj_gen;
          if (jj_mask_64[getToken(1).kind]) {
            t = jj_consume_token(REM);
          } else {
            jj_expLA1[64] = jj_gen;
            jj_consume_token(-1);
            throw new ParseError();
          }
        }
      }
      e2 = UnaryExpression();
                                         e = new JSBinaryExpression( t, e, e2);
    }
                                  return e;
  }

  static boolean[] jj_mask_63 = new boolean[122];
  static {
    jj_mask_63[STAR] =
    jj_mask_63[SLASH] =
    jj_mask_63[REM] = true;
  }
  static boolean[] jj_mask_64 = new boolean[122];
  static {
    jj_mask_64[REM] = true;
  }
  static boolean[] jj_mask_65 = new boolean[122];
  static {
    jj_mask_65[SLASH] = true;
  }
  static boolean[] jj_mask_66 = new boolean[122];
  static {
    jj_mask_66[STAR] = true;
  }
  
  final public JSExpression UnaryExpression() throws ParseError {
  Token t = null;
  JSExpression e = null;
  boolean prefix = true;
    if (jj_mask_79[getToken(1).kind]) {
      if (jj_mask_78[getToken(1).kind]) {
        t = jj_consume_token(BANG);
      } else {
        jj_expLA1[78] = jj_gen;
        if (jj_mask_77[getToken(1).kind]) {
          t = jj_consume_token(TILDE);
        } else {
          jj_expLA1[77] = jj_gen;
          jj_consume_token(-1);
          throw new ParseError();
        }
      }
      e = UnaryExpression();
    } else {
      jj_expLA1[79] = jj_gen;
      if (jj_mask_76[getToken(1).kind]) {
        t = jj_consume_token(MINUS);
        e = UnaryExpression();
      } else {
        jj_expLA1[76] = jj_gen;
        if (jj_mask_75[getToken(1).kind]) {
          if (jj_mask_74[getToken(1).kind]) {
            t = jj_consume_token(INCR);
          } else {
            jj_expLA1[74] = jj_gen;
            if (jj_mask_73[getToken(1).kind]) {
              t = jj_consume_token(DECR);
            } else {
              jj_expLA1[73] = jj_gen;
              jj_consume_token(-1);
              throw new ParseError();
            }
          }
          e = MemberExpression();
        } else {
          jj_expLA1[75] = jj_gen;
          if (jj_mask_72[getToken(1).kind]) {
            e = MemberExpression();
            if (jj_mask_71[getToken(1).kind]) {
              if (jj_mask_70[getToken(1).kind]) {
                t = jj_consume_token(INCR);
              } else {
                jj_expLA1[70] = jj_gen;
                if (jj_mask_69[getToken(1).kind]) {
                  t = jj_consume_token(DECR);
                } else {
                  jj_expLA1[69] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseError();
                }
              }
                                                prefix = false;
            } else {
              jj_expLA1[71] = jj_gen;
              ;
            }
          } else {
            jj_expLA1[72] = jj_gen;
            if (jj_mask_68[getToken(1).kind]) {
              t = jj_consume_token(NEW);
              Constructor();
            } else {
              jj_expLA1[68] = jj_gen;
              if (jj_mask_67[getToken(1).kind]) {
                t = jj_consume_token(DELETE);
                e = MemberExpression();
              } else {
                jj_expLA1[67] = jj_gen;
                jj_consume_token(-1);
                throw new ParseError();
              }
            }
          }
        }
      }
    }
                                  if(t != null) {
                                    return new JSUnaryExpression(t, e, prefix);
                                  }

                                  return e;
  }

  static boolean[] jj_mask_67 = new boolean[122];
  static {
    jj_mask_67[DELETE] = true;
  }
  static boolean[] jj_mask_68 = new boolean[122];
  static {
    jj_mask_68[NEW] = true;
  }
  static boolean[] jj_mask_69 = new boolean[122];
  static {
    jj_mask_69[DECR] = true;
  }
  static boolean[] jj_mask_70 = new boolean[122];
  static {
    jj_mask_70[INCR] = true;
  }
  static boolean[] jj_mask_71 = new boolean[122];
  static {
    jj_mask_71[INCR] =
    jj_mask_71[DECR] = true;
  }
  static boolean[] jj_mask_72 = new boolean[122];
  static {
    jj_mask_72[THIS] =
    jj_mask_72[INTEGER_LITERAL] =
    jj_mask_72[FLOATING_POINT_LITERAL] =
    jj_mask_72[STRING_LITERAL] =
    jj_mask_72[BOOLEAN_LITERAL] =
    jj_mask_72[NULL_LITERAL] =
    jj_mask_72[IDENTIFIER] =
    jj_mask_72[LPAREN] = true;
  }
  static boolean[] jj_mask_73 = new boolean[122];
  static {
    jj_mask_73[DECR] = true;
  }
  static boolean[] jj_mask_74 = new boolean[122];
  static {
    jj_mask_74[INCR] = true;
  }
  static boolean[] jj_mask_75 = new boolean[122];
  static {
    jj_mask_75[INCR] =
    jj_mask_75[DECR] = true;
  }
  static boolean[] jj_mask_76 = new boolean[122];
  static {
    jj_mask_76[MINUS] = true;
  }
  static boolean[] jj_mask_77 = new boolean[122];
  static {
    jj_mask_77[TILDE] = true;
  }
  static boolean[] jj_mask_78 = new boolean[122];
  static {
    jj_mask_78[BANG] = true;
  }
  static boolean[] jj_mask_79 = new boolean[122];
  static {
    jj_mask_79[BANG] =
    jj_mask_79[TILDE] = true;
  }
  
  final public void Constructor() throws ParseError {
    if (jj_mask_81[getToken(1).kind]) {
      jj_consume_token(THIS);
      jj_consume_token(DOT);
      ConstructorCall();
    } else {
      jj_expLA1[81] = jj_gen;
      if (jj_mask_80[getToken(1).kind]) {
        ConstructorCall();
      } else {
        jj_expLA1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseError();
      }
    }
  }

  static boolean[] jj_mask_80 = new boolean[122];
  static {
    jj_mask_80[IDENTIFIER] = true;
  }
  static boolean[] jj_mask_81 = new boolean[122];
  static {
    jj_mask_81[THIS] = true;
  }
  
  final public void ConstructorCall() throws ParseError {
    if (jj_2_4(2)) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      if (jj_mask_83[getToken(1).kind]) {
        ArgumentList();
      } else {
        jj_expLA1[83] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } else {
      if (jj_2_3(2)) {
        jj_consume_token(IDENTIFIER);
        jj_consume_token(DOT);
        ConstructorCall();
      } else {
        if (jj_mask_82[getToken(1).kind]) {
          jj_consume_token(IDENTIFIER);
        } else {
          jj_expLA1[82] = jj_gen;
          jj_consume_token(-1);
          throw new ParseError();
        }
      }
    }
  }

  static boolean[] jj_mask_82 = new boolean[122];
  static {
    jj_mask_82[IDENTIFIER] = true;
  }
  static boolean[] jj_mask_83 = new boolean[122];
  static {
    jj_mask_83[DELETE] =
    jj_mask_83[NEW] =
    jj_mask_83[THIS] =
    jj_mask_83[INTEGER_LITERAL] =
    jj_mask_83[FLOATING_POINT_LITERAL] =
    jj_mask_83[STRING_LITERAL] =
    jj_mask_83[BOOLEAN_LITERAL] =
    jj_mask_83[NULL_LITERAL] =
    jj_mask_83[IDENTIFIER] =
    jj_mask_83[LPAREN] =
    jj_mask_83[BANG] =
    jj_mask_83[TILDE] =
    jj_mask_83[INCR] =
    jj_mask_83[DECR] =
    jj_mask_83[MINUS] = true;
  }
  
// Departs from the grammar in the standard, since this works in all browsers
  final public JSExpression MemberExpression() throws ParseError {
         Token t;
  JSExpression e;
  JSExpression e2;
  Vector v=null;
    e = PrimaryExpression();
    label_17:
    while (true) {
      if (jj_mask_84[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[84] = jj_gen;
        break label_17;
      }
      if (jj_mask_88[getToken(1).kind]) {
        // ###Check up on this - I didn't know that you could have x.this.etc.
              t = jj_consume_token(DOT);
        e2 = PrimaryExpression();
                                         e = new JSBinaryExpression( t, e, e2);
      } else {
        jj_expLA1[88] = jj_gen;
        if (jj_mask_87[getToken(1).kind]) {
          t = jj_consume_token(LBRACKET);
          e2 = Expression();
          jj_consume_token(RBRACKET);
                                         e = new JSBinaryExpression( t, e, e2);
        } else {
          jj_expLA1[87] = jj_gen;
          if (jj_mask_86[getToken(1).kind]) {
            t = jj_consume_token(LPAREN);
            if (jj_mask_85[getToken(1).kind]) {
              v = ArgumentList();
            } else {
              jj_expLA1[85] = jj_gen;
              ;
            }
            jj_consume_token(RPAREN);
                                         if( v == null) {
                                         v = new Vector();
                                  }
                                  e = new JSFunctionExpression( t, e, v);
          } else {
            jj_expLA1[86] = jj_gen;
            jj_consume_token(-1);
            throw new ParseError();
          }
        }
      }
    }
                                  return e;
  }

  static boolean[] jj_mask_84 = new boolean[122];
  static {
    jj_mask_84[LPAREN] =
    jj_mask_84[LBRACKET] =
    jj_mask_84[DOT] = true;
  }
  static boolean[] jj_mask_85 = new boolean[122];
  static {
    jj_mask_85[DELETE] =
    jj_mask_85[NEW] =
    jj_mask_85[THIS] =
    jj_mask_85[INTEGER_LITERAL] =
    jj_mask_85[FLOATING_POINT_LITERAL] =
    jj_mask_85[STRING_LITERAL] =
    jj_mask_85[BOOLEAN_LITERAL] =
    jj_mask_85[NULL_LITERAL] =
    jj_mask_85[IDENTIFIER] =
    jj_mask_85[LPAREN] =
    jj_mask_85[BANG] =
    jj_mask_85[TILDE] =
    jj_mask_85[INCR] =
    jj_mask_85[DECR] =
    jj_mask_85[MINUS] = true;
  }
  static boolean[] jj_mask_86 = new boolean[122];
  static {
    jj_mask_86[LPAREN] = true;
  }
  static boolean[] jj_mask_87 = new boolean[122];
  static {
    jj_mask_87[LBRACKET] = true;
  }
  static boolean[] jj_mask_88 = new boolean[122];
  static {
    jj_mask_88[DOT] = true;
  }
  
// Vector of JSExpressions
  final public Vector ArgumentList() throws ParseError {
         Vector v = new Vector();
  JSExpression e;
    e = AssignmentExpression();
                                         v.addElement(e);
    label_18:
    while (true) {
      if (jj_mask_89[getToken(1).kind]) {
        ;
      } else {
        jj_expLA1[89] = jj_gen;
        break label_18;
      }
      jj_consume_token(COMMA);
      e = AssignmentExpression();
                                         v.addElement(e);
    }
                                         return v;
  }

  static boolean[] jj_mask_89 = new boolean[122];
  static {
    jj_mask_89[COMMA] = true;
  }
  
  final public JSExpression PrimaryExpression() throws ParseError {
  JSExpression e = null;
  Token t = null;
  boolean islit = true;
    if (jj_mask_97[getToken(1).kind]) {
      jj_consume_token(LPAREN);
      e = Expression();
      jj_consume_token(RPAREN);
                                         islit = false;
    } else {
      jj_expLA1[97] = jj_gen;
      if (jj_mask_96[getToken(1).kind]) {
        t = jj_consume_token(IDENTIFIER);
                                         islit = false;
                                  e = new JSIdentifier(t);
      } else {
        jj_expLA1[96] = jj_gen;
        if (jj_mask_95[getToken(1).kind]) {
          t = jj_consume_token(INTEGER_LITERAL);
        } else {
          jj_expLA1[95] = jj_gen;
          if (jj_mask_94[getToken(1).kind]) {
            t = jj_consume_token(FLOATING_POINT_LITERAL);
          } else {
            jj_expLA1[94] = jj_gen;
            if (jj_mask_93[getToken(1).kind]) {
              t = jj_consume_token(STRING_LITERAL);
            } else {
              jj_expLA1[93] = jj_gen;
              if (jj_mask_92[getToken(1).kind]) {
                t = jj_consume_token(BOOLEAN_LITERAL);
              } else {
                jj_expLA1[92] = jj_gen;
                if (jj_mask_91[getToken(1).kind]) {
                  t = jj_consume_token(NULL_LITERAL);
                } else {
                  jj_expLA1[91] = jj_gen;
                  if (jj_mask_90[getToken(1).kind]) {
                    t = jj_consume_token(THIS);
                                         islit = false;
                                  e = new JSThis(t);
                  } else {
                    jj_expLA1[90] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseError();
                  }
                }
              }
            }
          }
        }
      }
    }
                                         if( islit) {
                                         e = new JSLiteral(t);
                                  }
                                  return e;
  }

  static boolean[] jj_mask_90 = new boolean[122];
  static {
    jj_mask_90[THIS] = true;
  }
  static boolean[] jj_mask_91 = new boolean[122];
  static {
    jj_mask_91[NULL_LITERAL] = true;
  }
  static boolean[] jj_mask_92 = new boolean[122];
  static {
    jj_mask_92[BOOLEAN_LITERAL] = true;
  }
  static boolean[] jj_mask_93 = new boolean[122];
  static {
    jj_mask_93[STRING_LITERAL] = true;
  }
  static boolean[] jj_mask_94 = new boolean[122];
  static {
    jj_mask_94[FLOATING_POINT_LITERAL] = true;
  }
  static boolean[] jj_mask_95 = new boolean[122];
  static {
    jj_mask_95[INTEGER_LITERAL] = true;
  }
  static boolean[] jj_mask_96 = new boolean[122];
  static {
    jj_mask_96[IDENTIFIER] = true;
  }
  static boolean[] jj_mask_97 = new boolean[122];
  static {
    jj_mask_97[LPAREN] = true;
  }
  
  final private boolean jj_2_1(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_1();
    jj_save(0, xla);
    return retval;
  }

  final private boolean jj_2_2(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_2();
    jj_save(1, xla);
    return retval;
  }

  final private boolean jj_2_3(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_3();
    jj_save(2, xla);
    return retval;
  }

  final private boolean jj_2_4(int xla) throws ParseError {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_4();
    jj_save(3, xla);
    return retval;
  }

  final private boolean jj_3_1() throws ParseError {
    if (jj_scan_token(FOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_19()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_2() throws ParseError {
    if (jj_scan_token(FOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_22()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_3() throws ParseError {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(DOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_23()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_4() throws ParseError {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_19() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_20() throws ParseError {
    if (jj_3R_27()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_21() throws ParseError {
    if (jj_3R_27()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_22() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_23() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_24() throws ParseError {
    if (jj_3R_40()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_25() throws ParseError {
    if (jj_scan_token(VAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_41()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_26() throws ParseError {
    if (jj_3R_27()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_27() throws ParseError {
    if (jj_3R_42()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_28() throws ParseError {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_29() throws ParseError {
    if (jj_scan_token(IF)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_44()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_22()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_30() throws ParseError {
    if (jj_scan_token(WHILE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_44()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_22()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_31() throws ParseError {
    if (jj_scan_token(FOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_19()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_22()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_32() throws ParseError {
    if (jj_scan_token(FOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_19()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_27()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_22()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_33() throws ParseError {
    if (jj_scan_token(BREAK)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_34() throws ParseError {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_35() throws ParseError {
    if (jj_scan_token(WITH)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_27()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_22()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_36() throws ParseError {
    if (jj_scan_token(RETURN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_37() throws ParseError {
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_38() throws ParseError {
    if (jj_3R_19()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_39() throws ParseError {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_40() throws ParseError {
    if (jj_3R_42()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_41() throws ParseError {
    if (jj_3R_51()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_52()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_42() throws ParseError {
    if (jj_3R_53()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_43() throws ParseError {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_42()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_44() throws ParseError {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_27()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_45() throws ParseError {
    if (jj_scan_token(ELSE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_22()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_46() throws ParseError {
    if (jj_3R_27()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_47() throws ParseError {
    if (jj_3R_27()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_48() throws ParseError {
    if (jj_3R_27()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_49() throws ParseError {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    if (jj_scan_token(RBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_50() throws ParseError {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_42()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_51() throws ParseError {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_52() throws ParseError {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_51()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_53() throws ParseError {
    if (jj_3R_57()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_54() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_53()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_55() throws ParseError {
    if (jj_3R_22()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_56() throws ParseError {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_42()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_57() throws ParseError {
    if (jj_3R_73()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_58() throws ParseError {
    if (jj_scan_token(HOOK)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_42()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(COLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_42()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_59() throws ParseError {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_60() throws ParseError {
    if (jj_scan_token(SC_ANDASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_61() throws ParseError {
    if (jj_scan_token(SC_ORASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_62() throws ParseError {
    if (jj_scan_token(PLUSASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_63() throws ParseError {
    if (jj_scan_token(MINUSASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_64() throws ParseError {
    if (jj_scan_token(STARASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_65() throws ParseError {
    if (jj_scan_token(SLASHASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_66() throws ParseError {
    if (jj_scan_token(BIT_ANDASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_67() throws ParseError {
    if (jj_scan_token(BIT_ORASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_68() throws ParseError {
    if (jj_scan_token(XORASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_69() throws ParseError {
    if (jj_scan_token(REMASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_70() throws ParseError {
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_71() throws ParseError {
    if (jj_scan_token(RSIGNEDSHIFTASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_72() throws ParseError {
    if (jj_scan_token(RUNSIGNEDSHIFTASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_73() throws ParseError {
    if (jj_3R_75()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_76()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_74() throws ParseError {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_73()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_75() throws ParseError {
    if (jj_3R_77()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_78()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_76() throws ParseError {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_75()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_77() throws ParseError {
    if (jj_3R_79()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_78() throws ParseError {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_77()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_79() throws ParseError {
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_80() throws ParseError {
    if (jj_scan_token(XOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_79()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_81() throws ParseError {
    if (jj_3R_83()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_84()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_82() throws ParseError {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_83() throws ParseError {
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_86()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_84() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_83()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_85() throws ParseError {
    if (jj_3R_89()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_86() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_85()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_87() throws ParseError {
    if (jj_scan_token(EQ)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_88() throws ParseError {
    if (jj_scan_token(NE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_89() throws ParseError {
    if (jj_3R_95()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_90() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_89()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_91() throws ParseError {
    if (jj_scan_token(LT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_92() throws ParseError {
    if (jj_scan_token(GT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_93() throws ParseError {
    if (jj_scan_token(LE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_94() throws ParseError {
    if (jj_scan_token(GE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_95() throws ParseError {
    if (jj_3R_100()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_101()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_96() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_95()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_97() throws ParseError {
    if (jj_scan_token(LSHIFT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_98() throws ParseError {
    if (jj_scan_token(RSIGNEDSHIFT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_99() throws ParseError {
    if (jj_scan_token(RUNSIGNEDSHIFT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_100() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_101() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_100()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_102() throws ParseError {
    if (jj_scan_token(PLUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_103() throws ParseError {
    if (jj_scan_token(MINUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_104() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_100()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_105() throws ParseError {
    if (jj_scan_token(MINUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_100()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_106() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_117()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_107() throws ParseError {
    if (jj_3R_117()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_108() throws ParseError {
    if (jj_scan_token(NEW)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_119()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_109() throws ParseError {
    if (jj_scan_token(DELETE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_117()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_110() throws ParseError {
    if (jj_scan_token(STAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_111() throws ParseError {
    if (jj_scan_token(SLASH)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_112() throws ParseError {
    if (jj_scan_token(REM)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_113() throws ParseError {
    if (jj_scan_token(BANG)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_114() throws ParseError {
    if (jj_scan_token(TILDE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_115() throws ParseError {
    if (jj_scan_token(INCR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_116() throws ParseError {
    if (jj_scan_token(DECR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_117() throws ParseError {
    if (jj_3R_120()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_121()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_118() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_119() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_120() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_121() throws ParseError {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_122() throws ParseError {
    if (jj_scan_token(INCR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_123() throws ParseError {
    if (jj_scan_token(DECR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_124() throws ParseError {
    if (jj_scan_token(THIS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(DOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_23()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_125() throws ParseError {
    if (jj_3R_23()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_126() throws ParseError {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_27()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_127() throws ParseError {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_128() throws ParseError {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_129() throws ParseError {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_130() throws ParseError {
    if (jj_scan_token(STRING_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_131() throws ParseError {
    if (jj_scan_token(BOOLEAN_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_132() throws ParseError {
    if (jj_scan_token(NULL_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_133() throws ParseError {
    if (jj_scan_token(THIS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_134() throws ParseError {
    if (jj_scan_token(DOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_120()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_135() throws ParseError {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_27()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_136() throws ParseError {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_137() throws ParseError {
    if (jj_3R_40()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  public JSParserTokenManager token_source;
  public Token token;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private JSParser jj_me;
  private int jj_gen;
  private int[] jj_expLA1 = new int[98];
  private JJJSParserCalls[] jj_2_rtns = new JJJSParserCalls[4];
  private boolean jj_rescan = false;

  public JSParser(java.io.InputStream stream) {
    ASCII_UCodeESC_CharStream input_stream = new ASCII_UCodeESC_CharStream(stream, 1, 1);
    token_source = new JSParserTokenManager(input_stream);
    token = new Token();
    jj_me = this;
    jj_gen = 0;
    for (int i = 0; i < 98; i++) jj_expLA1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJJSParserCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    ASCII_UCodeESC_CharStream input_stream = new ASCII_UCodeESC_CharStream(stream, 1, 1);
    token_source.ReInit(input_stream);
    token = new Token();
    jj_gen = 0;
    for (int i = 0; i < 98; i++) jj_expLA1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJJSParserCalls();
  }

  public JSParser(JSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_me = this;
    jj_gen = 0;
    for (int i = 0; i < 98; i++) jj_expLA1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJJSParserCalls();
  }

  public void ReInit(JSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_gen = 0;
    for (int i = 0; i < 98; i++) jj_expLA1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJJSParserCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseError {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    jj_token_error_setup(token, kind);
    throw new ParseError();
  }

  final private boolean jj_scan_token(int kind) throws ParseError {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 1; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    return (jj_scanpos.kind != kind);
  }

  final public Token getNextToken() throws ParseError {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) throws ParseError {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final String jj_add_escapes(String str) {
    String retval = "";
    char ch;
    for (int i = 0; i < str.length(); i++) {
      ch = str.charAt(i);
      if (ch == '\b') {
        retval += "\\b";
      } else if (ch == '\t') {
        retval += "\\t";
      } else if (ch == '\n') {
        retval += "\\n";
      } else if (ch == '\f') {
        retval += "\\f";
      } else if (ch == '\r') {
        retval += "\\r";
      } else if (ch == '\"') {
        retval += "\\\"";
      } else if (ch == '\'') {
        retval += "\\\'";
      } else if (ch == '\\') {
        retval += "\\\\";
      } else if (ch < 0x20 || ch > 0x7e) {
        String s = "0000" + Integer.toString(ch, 16);
        retval += "\\u" + s.substring(s.length() - 4, s.length());
      } else {
        retval += ch;
      }
    }
    return retval;
  }

  protected int error_line;
  protected int error_column;
  protected String error_string;
  protected String[] expected_tokens;

  protected void token_error() {
    System.out.println("");
    System.out.println("Parse error at line " + error_line + ", column " + error_column + ".  Encountered:");
    System.out.println("    \"" + jj_add_escapes(error_string) + "\"");
    System.out.println("");
    if (expected_tokens.length == 1) {
      System.out.println("Was expecting:");
    } else {
      System.out.println("Was expecting one of:");
    }
    for (int i = 0; i < expected_tokens.length; i++) {
      System.out.println("    " + expected_tokens[i]);
    }
    System.out.println("");
  }

  private java.util.Vector jj_errortokens = new java.util.Vector();
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos, jj_maxsize;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      if (jj_endpos > jj_maxsize) jj_maxsize = jj_endpos;
      String buf = "";
      for (int i = 0; i < jj_endpos; i++) {
        buf += tokenImage[jj_lasttokens[i]] + " ";
      }
      if (jj_lasttokens[jj_endpos-1] != 0) buf += "...";
      boolean exists = false;
      for (java.util.Enumeration enum = jj_errortokens.elements(); enum.hasMoreElements();) {
        if (buf.equals((String)(enum.nextElement()))) {
          exists = true;
        }
      }
      if (!exists) jj_errortokens.addElement(buf);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  final private void jj_token_error_setup(Token current, int kind) throws ParseError {
    jj_errortokens.removeAllElements();
    boolean[] la1tokens = new boolean[122];
    boolean[] mask = null;
    for (int i = 0; i < 122; i++) {
      la1tokens[i] = false;
    }
    if (kind >= 0) la1tokens[kind] = true;
    for (int i = 0; i < 98; i++) {
      if (jj_expLA1[i] == jj_gen) {
        switch (i) {
          case 0: mask = jj_mask_0; break;
          case 1: mask = jj_mask_1; break;
          case 2: mask = jj_mask_2; break;
          case 3: mask = jj_mask_3; break;
          case 4: mask = jj_mask_4; break;
          case 5: mask = jj_mask_5; break;
          case 6: mask = jj_mask_6; break;
          case 7: mask = jj_mask_7; break;
          case 8: mask = jj_mask_8; break;
          case 9: mask = jj_mask_9; break;
          case 10: mask = jj_mask_10; break;
          case 11: mask = jj_mask_11; break;
          case 12: mask = jj_mask_12; break;
          case 13: mask = jj_mask_13; break;
          case 14: mask = jj_mask_14; break;
          case 15: mask = jj_mask_15; break;
          case 16: mask = jj_mask_16; break;
          case 17: mask = jj_mask_17; break;
          case 18: mask = jj_mask_18; break;
          case 19: mask = jj_mask_19; break;
          case 20: mask = jj_mask_20; break;
          case 21: mask = jj_mask_21; break;
          case 22: mask = jj_mask_22; break;
          case 23: mask = jj_mask_23; break;
          case 24: mask = jj_mask_24; break;
          case 25: mask = jj_mask_25; break;
          case 26: mask = jj_mask_26; break;
          case 27: mask = jj_mask_27; break;
          case 28: mask = jj_mask_28; break;
          case 29: mask = jj_mask_29; break;
          case 30: mask = jj_mask_30; break;
          case 31: mask = jj_mask_31; break;
          case 32: mask = jj_mask_32; break;
          case 33: mask = jj_mask_33; break;
          case 34: mask = jj_mask_34; break;
          case 35: mask = jj_mask_35; break;
          case 36: mask = jj_mask_36; break;
          case 37: mask = jj_mask_37; break;
          case 38: mask = jj_mask_38; break;
          case 39: mask = jj_mask_39; break;
          case 40: mask = jj_mask_40; break;
          case 41: mask = jj_mask_41; break;
          case 42: mask = jj_mask_42; break;
          case 43: mask = jj_mask_43; break;
          case 44: mask = jj_mask_44; break;
          case 45: mask = jj_mask_45; break;
          case 46: mask = jj_mask_46; break;
          case 47: mask = jj_mask_47; break;
          case 48: mask = jj_mask_48; break;
          case 49: mask = jj_mask_49; break;
          case 50: mask = jj_mask_50; break;
          case 51: mask = jj_mask_51; break;
          case 52: mask = jj_mask_52; break;
          case 53: mask = jj_mask_53; break;
          case 54: mask = jj_mask_54; break;
          case 55: mask = jj_mask_55; break;
          case 56: mask = jj_mask_56; break;
          case 57: mask = jj_mask_57; break;
          case 58: mask = jj_mask_58; break;
          case 59: mask = jj_mask_59; break;
          case 60: mask = jj_mask_60; break;
          case 61: mask = jj_mask_61; break;
          case 62: mask = jj_mask_62; break;
          case 63: mask = jj_mask_63; break;
          case 64: mask = jj_mask_64; break;
          case 65: mask = jj_mask_65; break;
          case 66: mask = jj_mask_66; break;
          case 67: mask = jj_mask_67; break;
          case 68: mask = jj_mask_68; break;
          case 69: mask = jj_mask_69; break;
          case 70: mask = jj_mask_70; break;
          case 71: mask = jj_mask_71; break;
          case 72: mask = jj_mask_72; break;
          case 73: mask = jj_mask_73; break;
          case 74: mask = jj_mask_74; break;
          case 75: mask = jj_mask_75; break;
          case 76: mask = jj_mask_76; break;
          case 77: mask = jj_mask_77; break;
          case 78: mask = jj_mask_78; break;
          case 79: mask = jj_mask_79; break;
          case 80: mask = jj_mask_80; break;
          case 81: mask = jj_mask_81; break;
          case 82: mask = jj_mask_82; break;
          case 83: mask = jj_mask_83; break;
          case 84: mask = jj_mask_84; break;
          case 85: mask = jj_mask_85; break;
          case 86: mask = jj_mask_86; break;
          case 87: mask = jj_mask_87; break;
          case 88: mask = jj_mask_88; break;
          case 89: mask = jj_mask_89; break;
          case 90: mask = jj_mask_90; break;
          case 91: mask = jj_mask_91; break;
          case 92: mask = jj_mask_92; break;
          case 93: mask = jj_mask_93; break;
          case 94: mask = jj_mask_94; break;
          case 95: mask = jj_mask_95; break;
          case 96: mask = jj_mask_96; break;
          case 97: mask = jj_mask_97; break;
        }
        for (int j = 0; j < 122; j++) {
          if (mask[j]) la1tokens[j] = true;
        }
      }
    }
    if (la1tokens[0]) {
      jj_errortokens.addElement(tokenImage[0] + " ");
    }
    for (int i = 1; i < 122; i++) {
      if (la1tokens[i]) {
        jj_errortokens.addElement(tokenImage[i] + " ...");
      }
    }
    jj_endpos = 0;
    jj_maxsize = 1;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    expected_tokens = new String[jj_errortokens.size()];
    for (int i = 0; i < jj_errortokens.size(); i++) {
      expected_tokens[i] = (String)(jj_errortokens.elementAt(i));
    }
    error_line = current.beginLine;
    error_column = current.beginColumn;
    error_string = "";
    Token tok = current;
    for (int i = 0; i < jj_maxsize; i++) {
      if (tok.kind == 0) {
        error_string += " " + tokenImage[0];
        break;
      }
      error_string += " " + tok.image;
      tok = tok.next;
    }
    error_string = error_string.substring(1);
    jj_me.token_error();
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  private void jj_rescan_token() throws ParseError {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
      JJJSParserCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJJSParserCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJJSParserCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

}

class JJJSParserCalls {
  int gen;
  Token first;
  int arg;
  JJJSParserCalls next;
}
