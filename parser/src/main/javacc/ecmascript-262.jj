options {

	/*
	 * Default value is true. If true, all methods and class variables 
	 * are specified as static in the generated parser and token manager. This allows only 
	 * one parser object to be present, but it improves the performance of the parser.
	 */
	STATIC = false;

	/*
	 * Options for obtaining debugging information
	 */
	DEBUG_PARSER = false;

	DEBUG_TOKEN_MANAGER = false;

	/*
	 * Default value is false. When set to true, the generated parser 
	 * uses an input stream object that processes Java Unicode escapes before 
	 * sending characters to the token manager. 
	 */
	// JAVA_UNICODE_ESCAPE = true;

	/*
	 * Default value is false. When set to true, the generated parser 
	 * uses an input stream object that reads Unicode files. By default, ASCII files 
	 * are assumed. 
	 */
	UNICODE_INPUT = true;

	/*
	 * JDK Version
	 */
	JDK_VERSION = "1.5";
	
	USER_CHAR_STREAM = true;
	

}

PARSER_BEGIN(EcmaScriptParser)

package org.hisrc.jscm.parser;

import org.hisrc.jscm.codemodel.*;
import org.hisrc.jscm.codemodel.expression.*;
import org.hisrc.jscm.codemodel.expression.JSObjectLiteral.JSPropertyAssignment;
import org.hisrc.jscm.codemodel.literal.*;
import org.hisrc.jscm.codemodel.operator.*;
import org.hisrc.jscm.codemodel.statement.*;
import org.hisrc.jscm.codemodel.statement.JSSwitchStatement.JSCaseClause;
import org.hisrc.jscm.codemodel.statement.JSSwitchStatement.JSDefaultClause;
import org.hisrc.jscm.parser.impl.*;
import org.hisrc.jscm.parser.TokenUtils;

import java.util.List;
import java.util.LinkedList;
import java.util.Arrays;

public class EcmaScriptParser {

	private final JSCodeModelBuilder builder = new CodeModelBuilderImpl();

}
PARSER_END(EcmaScriptParser)

/*****************************************
 * LEXICAL & REGEXP GRAMMARS STARTS HERE *
 *****************************************/
/* 

/* 6 Source Text */

/*
TOKEN:
{
	<SOURCE_CHAR:	["\u0000"-"\uFFFE"]>
}
*/

/* 7 Lexical Conventions */

/* http://www.unicode.org/Public/UNIDATA/UnicodeData.txt */

/*
InputElementDiv ::
	WhiteSpace
	LineTerminator
	Comment
	Token
	DivPunctuator
*/
/*
MORE	:
{
	<INPUT_ELEMENT_DIV:
		<WHITE_SPACE>
	|	<LINE_TERMINATOR>
	|	<COMMENT>
	|	<_TOKEN>
	|	<DIV_PUNCTUATOR>
	>
}
*/

/*
InputElementRegExp ::
	WhiteSpace
	LineTerminator
	Comment
	Token
	RegularExpressionLiteral
*/
/*
MORE:
{
	<INPUT_ELEMENT_REG_EXP:
		<WHITE_SPACE>
	|	<LINE_TERMINATOR>
	|	<COMMENT>
	|	<_TOKEN>
	|	<REGULAR_EXPRESSION_LITERAL>
	>
}
*/

/* ========================================================================== */
/* 7.2 White Space */
/* ========================================================================== */

/*
WhiteSpace ::
	<TAB>
	<VT>
	<FF>
	<SP>
	<NBSP>
	<BOM>
	<USP>
*/
<DEFAULT, NO_REGULAR_EXPRESSION_HERE, NO_LINE_TERMINATOR_HERE>
SPECIAL_TOKEN :
{
	<WHITE_SPACE:
		<TAB>
	|	<VT>
	|	<FF>
	|	<SP>
	|	<NBSP>
	|	<BOM>
	|	<USP>
	>
|	<#TAB:	"\u0009">
|	<#VT:	"\u000B">
|	<#FF:	"\u000C">
|	<#SP:	"\u0020"> 
|	<#NBSP:	"\u00A0">
|	<#BOM:	"\uFEFF">
|	<#USP: 
		["\u1680"] 
	|	["\u2000"] 
	|	["\u2001"] 
	|	["\u2002"] 
	|	["\u2003"] 
	|	["\u2004"] 
	|	["\u2005"] 
	|	["\u2006"] 
	|	["\u2007"]
	|	["\u2008"] 
	|	["\u2009"] 
	|	["\u200A"] 
	|	["\u202F"] 
	|	["\u205F"] 
	|	["\u3000"]
	>
}

/* ========================================================================== */
/* 7.3 Line Terminators */
/* ========================================================================== */
/*
LineTerminator ::
	<LF>
	<CR>
	<LS>
	<PS>
*/
<DEFAULT, NO_REGULAR_EXPRESSION_HERE>
SPECIAL_TOKEN :
{
	<LINE_TERMINATOR:
		<CR> ( <LF> ) ?
	|	<LF>
	|	<LS>
	|	<PS>
	>
|	<#LF:	"\n"> 
|	<#CR:	"\r"> 
|	<#LS:	"\u2028"> 
|	<#PS:	"\u2029">
}

<NO_LINE_TERMINATOR_HERE>
TOKEN :
{
	<LINE_TERMINATOR_TOKEN:
		<CR> ( <LF> ) ?
	|	<LF>
	|	<LS>
	|	<PS>
	>
}

/*
LineTerminatorSequence ::
	<LF>
	<CR> [lookahead ÔÉè <LF> ]
	<LS>
	<PS>
	<CR> <LF>
*/

/* ========================================================================== */
/* 7.4 Comments */
/* ========================================================================== */
/*
Comment ::
	MultiLineComment
	SingleLineComment
*/

/*
SingleLineComment ::
	// SingleLineCommentChars_opt

SingleLineCommentChars ::
	SingleLineCommentChar SingleLineCommentChars_opt

SingleLineCommentChar ::
	SourceCharacter but not LineTerminator
*/
<DEFAULT, NO_REGULAR_EXPRESSION_HERE, NO_LINE_TERMINATOR_HERE>
SPECIAL_TOKEN :
{
	<SINGLE_LINE_COMMENT:	"//" ( ~["\n", "\r", "\u2028", "\u2029"] ) *>
}

<DEFAULT, NO_REGULAR_EXPRESSION_HERE, NO_LINE_TERMINATOR_HERE>
MORE :
{
	"/*"	{ lexicalStateBeforeMultiLineComment = curLexState; } :IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
	<MULTI_LINE_COMMENT:	"*/">	{ SwitchTo(lexicalStateBeforeMultiLineComment); } /*: DEFAULT*/
}

<IN_MULTI_LINE_COMMENT>
MORE :
{
	<~[]>
}

/* ========================================================================== */
/* 7.5 Tokens */
/* ========================================================================== */
/*
Token ::
	IdentifierName
	Punctuator
	NumericLiteral
	StringLiteral
*/

/* ========================================================================== */
/* 7.6 Identifier Names and Identifiers */
/* ========================================================================== */

/* ========================================================================== */
/* 7.6.1 Reserved Words */
/* ========================================================================== */

/* ========================================================================== */
/* 7.6.1.1 Keywords */
/* ========================================================================== */
/*
Keyword :: one of
	break	do	instanceof	typeof
	case	else	new	var
	catch	finally return	void
	continue	for switch	while
	debugger	function	this	with
	default	if	throw
	delete	in	try
*/
<DEFAULT, NO_REGULAR_EXPRESSION_HERE, NO_LINE_TERMINATOR_HERE>
TOKEN :
{
	<BREAK:	"break">	:NO_LINE_TERMINATOR_HERE
|	<CASE:	"case">	:DEFAULT
|	<CATCH:	"catch">	:DEFAULT
|	<CONTINUE:	"continue">	:NO_LINE_TERMINATOR_HERE
|	<DEBUGGER:	"debugger">	:DEFAULT
|	<_DEFAULT:	"default">	:DEFAULT
|	<DELETE:	"delete">	:DEFAULT
|	<DO:	"do">	:DEFAULT
|	<ELSE:	"else">	:DEFAULT
|	<FINALLY:	"finally">	:DEFAULT
|	<FOR:	"for">	:DEFAULT
|	<FUNCTION:	"function">	:DEFAULT
|	<IF:	"if">	:DEFAULT
|	<IN:	"in">	:DEFAULT
|	<INSTANCEOF:	"instanceof">	:DEFAULT
|	<NEW:	"new">	:DEFAULT
|	<RETURN:	"return">	:NO_LINE_TERMINATOR_HERE
|	<SWITCH:	"switch">	:DEFAULT
|	<THIS:	"this">	:NO_REGULAR_EXPRESSION_HERE
|	<THROW:	"throw">	:NO_LINE_TERMINATOR_HERE
|	<TRY:	"try">	:DEFAULT
|	<TYPEOF:	"typeof">	:DEFAULT
|	<VAR:	"var">	:DEFAULT
|	<VOID:	"void">	:DEFAULT
|	<WHILE:	"while">	:DEFAULT
|	<WITH:	"with">	:DEFAULT
}

/* ========================================================================== */
/* 7.6.1.2 Future Reserved Words */
/* ========================================================================== */
/*
FutureReservedWord :: one of
	class	enum	extends	super
	const	export	import
*/
<DEFAULT, NO_REGULAR_EXPRESSION_HERE, NO_LINE_TERMINATOR_HERE>
TOKEN :
{
	<CLASS:	"class">	:DEFAULT
|	<CONST:	"const">	:DEFAULT
|	<ENUM:	"enum">	:DEFAULT
|	<EXPORT:	"export">	:DEFAULT
|	<EXTENDS:	"extends">	:DEFAULT
|	<IMPORT:	"import">	:DEFAULT
|	<SUPER:	"super">	:DEFAULT
}
/* ========================================================================== */
/*
	Strict Mode:
	implements	let	private	public	yield
	interface	package	protected	static
*/
/* TODO */
/* ========================================================================== */
/* 7.7 Punctuators */
/* ========================================================================== */
/*
Punctuator :: one of
	{	}	(	)	[	]
	.	;	,	<	>	<=
	>=	==	!=	===	!==
	+	-	*	%	++	--
	<<	>>	>>>	&	|	^
	!	~	&&	||	?	:
	=	+=	-=	*=	%=	<<=
	>>=	>>>=	&=	|=	^=
*/
<DEFAULT, NO_REGULAR_EXPRESSION_HERE, NO_LINE_TERMINATOR_HERE>
TOKEN :
{
	<LBRACE:	"{">	:DEFAULT
|	<RBRACE:	"}">	:NO_REGULAR_EXPRESSION_HERE
|	<LPAREN:	"(">	:DEFAULT
|	<RPAREN:	")">	:NO_REGULAR_EXPRESSION_HERE
|	<LBRACKET:	"[">	:DEFAULT
|	<RBRACKET:	"]">	:NO_REGULAR_EXPRESSION_HERE
|	<DOT:	".">	:DEFAULT
|	<SEMICOLON:	";">	:DEFAULT
|	<COMMA:	",">	:DEFAULT
|	<LT:	"<">	:DEFAULT
|	<GT:	">">	:DEFAULT
|	<LE:	"<=">	:DEFAULT
|	<GE:	">=">	:DEFAULT
|	<EQ:	"==">	:DEFAULT
|	<NE:	"!=">	:DEFAULT
|	<SEQ:	"===">	:DEFAULT
|	<SNEQ:	"!==">	:DEFAULT
|	<PLUS:	"+">	:DEFAULT
|	<MINUS:	"-">	:DEFAULT
|	<STAR:	"*">	:DEFAULT
|	<REM:	"%">	:DEFAULT
|	<INCR:	"++">	:NO_REGULAR_EXPRESSION_HERE
|	<DECR:	"--">	:NO_REGULAR_EXPRESSION_HERE
|	<LSHIFT:	"<<">	:DEFAULT
|	<RSHIFT:	">>">	:DEFAULT
|	<RUNSHIFT:	">>>">	:DEFAULT
|	<BIT_AND:	"&">	:DEFAULT
|	<BIT_OR:	"|">	:DEFAULT
|	<XOR:	"^">	:DEFAULT
|	<BANG:	"!">	:DEFAULT
|	<TILDE:	"~">	:NO_REGULAR_EXPRESSION_HERE
|	<SC_AND:	"&&">	:DEFAULT
|	<SC_OR:	"||">	:DEFAULT
|	<HOOK:	"?">	:DEFAULT
|	<COLON:	":">	:DEFAULT
|	<ASSIGN:	"=">	:DEFAULT
|	<PLUSASSIGN:	"+=">	:DEFAULT
|	<MINUSASSIGN:	"-=">	:DEFAULT
|	<STARASSIGN:	"*=">	:DEFAULT
|	<REMASSIGN:	"%=">	:DEFAULT
|	<LSHIFTASSIGN:	"<<=">	:DEFAULT
|	<RSIGNEDSHIFTASSIGN:	">>=">	:DEFAULT
|	<RUNSIGNEDSHIFTASSIGN:	">>>=">	:DEFAULT
|	<ANDASSIGN:	"&=">	:DEFAULT
|	<ORASSIGN:	"|=">	:DEFAULT
|	<XORASSIGN:	"^=">	:DEFAULT
}

/*
DivPunctuator :: one of
	/ /=
*/
<NO_REGULAR_EXPRESSION_HERE>
TOKEN :
{
	<SLASHASSIGN:	"/=">	:DEFAULT
|	<SLASH:		"/">	:DEFAULT
}

/* ========================================================================== */
/* 7.8 Literals */
/* ========================================================================== */

JSLiteral Literal() :
{
	Token t;
}
{
	t = <DECIMAL_LITERAL>
	{
		return this.builder.decimalLiteral(t.image);
	}
|	t = <OCTAL_INTEGER_LITERAL>
	{
		return this.builder.octalIntegerLiteral(t.image);
	}
|	t = <HEX_INTEGER_LITERAL>
	{
		return this.builder.hexIntegerLiteral(t.image);
	}
|	t = <STRING_LITERAL>
	{
		return this.builder.stringLiteral(t.image);
	}
|	t = <BOOLEAN_LITERAL>
	{
		return this.builder.booleanLiteral(t.image);
	}
|	t = <NULL_LITERAL>
	{
		return this.builder.nullLiteral(t.image);
	}
|	t = <REGULAR_EXPRESSION_LITERAL>
	{
		return this.builder.regularExpressionLiteral(t.image);
	}
}



/* ========================================================================== */
/* 7.8.1 Null Literals */
/* ========================================================================== */
/*
NullLiteral ::
	null
*/
<DEFAULT, NO_REGULAR_EXPRESSION_HERE, NO_LINE_TERMINATOR_HERE>
TOKEN:
{ 
	<NULL_LITERAL: "null">	:NO_REGULAR_EXPRESSION_HERE
}

/* ========================================================================== */
/* 7.8.2 Boolean Literals */
/* ========================================================================== */
/*
BooleanLiteral ::
	true
	false
*/
<DEFAULT, NO_REGULAR_EXPRESSION_HERE, NO_LINE_TERMINATOR_HERE>
TOKEN:
{ 
	<BOOLEAN_LITERAL:
		"true"
	|	"false"
	>	:NO_REGULAR_EXPRESSION_HERE
}

/* ========================================================================== */
/* 7.8.3 Numeric Literals */
/* ========================================================================== */
/*
NumericLiteral ::
	DecimalLiteral
	HexIntegerLiteral
*/
JSNumericLiteral NumericLiteral() :
{
	Token t;
}
{
	t = <HEX_INTEGER_LITERAL>
	{
		return this.builder.hexIntegerLiteral(t.image);
	}
|	t = <DECIMAL_LITERAL>
	{
		return this.builder.decimalLiteral(t.image);
	}
|	t = <OCTAL_INTEGER_LITERAL>
	{
		return this.builder.octalIntegerLiteral(t.image);
	}
}

JSDecimalLiteral DecimalLiteral() :
{
	Token t;
}
{
	t = <DECIMAL_LITERAL>
	{
		return this.builder.decimalLiteral(t.image);
	}
}

/*
DecimalLiteral ::
	DecimalIntegerLiteral . DecimalDigits_opt ExponentPart_opt
	. DecimalDigits ExponentPart_opt
	DecimalIntegerLiteral ExponentPart_opt

DecimalIntegerLiteral ::
	0
	NonZeroDigit DecimalDigits_opt

DecimalDigits ::
	DecimalDigit
	DecimalDigits DecimalDigit

DecimalDigit :: one of
	0 1 2 3 4 5 6 7 8 9

NonZeroDigit :: one of
	1 2 3 4 5 6 7 8 9

ExponentPart ::
	ExponentIndicator SignedInteger

ExponentIndicator :: one of
	e E

SignedInteger ::
	DecimalDigits
	+ DecimalDigits
	- DecimalDigits
*/
<DEFAULT, NO_REGULAR_EXPRESSION_HERE, NO_LINE_TERMINATOR_HERE>
TOKEN:
{ 
	<DECIMAL_LITERAL:
		<DECIMAL_INTEGER_LITERAL> "." ( <DECIMAL_DIGITS> ) ? ( <EXPONENT_PART> ) ?
	|	"."	<DECIMAL_DIGITS> ( <EXPONENT_PART> ) ?
	|	<DECIMAL_INTEGER_LITERAL> (	<EXPONENT_PART> ) ? 
	> 	:NO_REGULAR_EXPRESSION_HERE
|	<#DECIMAL_DIGITS: ( <DECIMAL_DIGIT> ) +>
|	<#DECIMAL_DIGIT: ["0"-"9"]>
|	<#NON_ZERO_DIGIT: ["1"-"9"]>
|	<#EXPONENT_PART: ( "e" | "E" ) ( ["+", "-"] ) ? <DECIMAL_DIGITS>>
|	<#DECIMAL_INTEGER_LITERAL:
		// TODO Add this to allow 09 -> 9
		"0" ( <OCTAL_DIGIT> ) * ( ["8"-"9"] ) ( <DECIMAL_DIGITS> ) ?
	|	"0" 
	|	<NON_ZERO_DIGIT> ( <DECIMAL_DIGITS> ) ? >
}

/*
HexIntegerLiteral ::
	0x HexDigit
	0X HexDigit
	HexIntegerLiteral HexDigit
*/
<DEFAULT, NO_REGULAR_EXPRESSION_HERE, NO_LINE_TERMINATOR_HERE>
TOKEN:
{
	<HEX_INTEGER_LITERAL: "0" ["x", "X"] ( <HEX_DIGIT> ) +>	:NO_REGULAR_EXPRESSION_HERE
}

/*
OctalIntegerLiteral ::
	0 OctalDigit
	OctalIntegerLiteral OctalDigit
*/
<DEFAULT, NO_REGULAR_EXPRESSION_HERE, NO_LINE_TERMINATOR_HERE>
TOKEN:
{
	<OCTAL_INTEGER_LITERAL: "0" ( <OCTAL_DIGIT> ) +>	:NO_REGULAR_EXPRESSION_HERE
}

/* ========================================================================== */
/* 7.8.4 String Literals */
/* ========================================================================== */

JSStringLiteral StringLiteral() :
{
	Token t;
}
{
	t = <STRING_LITERAL>
	{
		return this.builder.stringLiteral(t.image);
	}
}

/*
StringLiteral ::
	" DoubleStringCharacters_opt "
	' SingleStringCharacters_opt '
*/
<DEFAULT, NO_REGULAR_EXPRESSION_HERE, NO_LINE_TERMINATOR_HERE>
TOKEN:
{
	<STRING_LITERAL:
		 "\"" ( <DOUBLE_STRING_CHARACTERS> ) ? "\""
	|	"'" ( <SINGLE_STRING_CHARACTERS> ) ? "'"
	>	:NO_REGULAR_EXPRESSION_HERE
/*
DoubleStringCharacters ::
	DoubleStringCharacter DoubleStringCharacters_opt
*/
|	<#DOUBLE_STRING_CHARACTERS: ( <DOUBLE_STRING_CHARACTER> ) *>
/*
SingleStringCharacters ::
	SingleStringCharacter SingleStringCharactersopt
*/
|	<#SINGLE_STRING_CHARACTERS: ( <SINGLE_STRING_CHARACTER> ) *>
/*
DoubleStringCharacter ::
	SourceCharacter but not one of " or \ or LineTerminator
	\ EscapeSequence
	LineContinuation
*/
|	<#DOUBLE_STRING_CHARACTER:
		"\\" <ESCAPE_SEQUENCE>
	|	<LINE_CONTINUATION>
	|	( ~["\"", "\n", "\r", "\u2028", "\u2029", "\\"] )
	>
/*
SingleStringCharacter ::
	SourceCharacter but not one of ' or \ or LineTerminator
	\ EscapeSequence
	LineContinuation
*/
|	<#SINGLE_STRING_CHARACTER:
		"\\" <ESCAPE_SEQUENCE>
	|	<LINE_CONTINUATION>
	|	( ~["\'", "\n", "\r", "\u2028", "\u2029", "\\"] )
	>
/*
LineContinuation ::
	\ LineTerminatorSequence
*/
|	<#LINE_CONTINUATION:
		"\\"
		(
			"\r\n"
		|	"\r"
		|	"\n"
		|	"\u2028"
		|	"\u2029"
		)
	>
/*
EscapeSequence ::
	CharacterEscapeSequence
//	0 [lookahead not_in DecimalDigit]
	OctalEscapeSequence
	HexEscapeSequence
	UnicodeEscapeSequence
*/
|	<#ESCAPE_SEQUENCE:
		<CHARACTER_ESCAPE_SEQUENCE>
//		|	"0" // TODO [lookahead not_in DecimalDigit]
		|	<OCTAL_ESCAPE_SEQUENCE>
		|	<HEX_ESCAPE_SEQUENCE>
		|	<UNICODE_ESCAPE_SEQUENCE>
	>
/*
CharacterEscapeSequence ::
	SingleEscapeCharacter
	NonEscapeCharacter
*/
|	<#CHARACTER_ESCAPE_SEQUENCE:
		<SINGLE_ESCAPE_CHARACTER>
	|	<NON_ESCAPE_CHARACTER>
	>
/*
SingleEscapeCharacter :: one of
	' " \ b f n r t v
*/
|	<#SINGLE_ESCAPE_CHARACTER:
		["'" , "\"" , "\\" , "b" , "f" , "n" , "r" , "t" , "v"]
	>
/*
NonEscapeCharacter ::
	SourceCharacter but not one of EscapeCharacter or LineTerminator

EscapeCharacter ::
	SingleEscapeCharacter
	DecimalDigit
	x
	u
*/
|	<#NON_ESCAPE_CHARACTER:	~["\n","\r","\u2028","\u2029", "'" , "\"", "\\", "b", "f", "n", "r", "t", "v", "x", "u", "0"-"9"]>
|	<#OCTAL_ESCAPE_SEQUENCE:
		["0"-"3"] <OCTAL_DIGIT> ( <OCTAL_DIGIT> ) ?
	|	["4"-"7"] <OCTAL_DIGIT>
	|	<OCTAL_DIGIT>
	>
		
/*
HexEscapeSequence ::
	x HexDigit HexDigit
*/
|	<#HEX_ESCAPE_SEQUENCE:
		"x"
		<HEX_DIGIT>
		<HEX_DIGIT>
	>
}

/* ========================================================================== */
/* 7.8.5 Regular Expression Literals */
/* ========================================================================== */

/*
If we're in the NO_REGULAR_EXPRESSION_HERE lexical state, we should not recognize regular expressions
anymore.
*/ 
<DEFAULT, NO_LINE_TERMINATOR_HERE>
TOKEN:
{
/*
RegularExpressionLiteral ::
	/ RegularExpressionBody / RegularExpressionFlags
*/
/*
RegularExpressionFlags ::
	[empty]
	RegularExpressionFlags IdentifierPart
*/
	<REGULAR_EXPRESSION_LITERAL: "/" <REGULAR_EXPRESSION_BODY> "/" ( <IDENTIFIER_PART> ) *> :NO_REGULAR_EXPRESSION_HERE
/*
RegularExpressionBody ::
	RegularExpressionFirstChar RegularExpressionChars
*/
/*
RegularExpressionChars ::
	[empty]
	RegularExpressionChars RegularExpressionChar
*/
|	<#REGULAR_EXPRESSION_BODY: <REGULAR_EXPRESSION_FIRST_CHAR> ( <REGULAR_EXPRESSION_CHAR> ) *>
/*
RegularExpressionChar ::
	RegularExpressionNonTerminator but not one of \ or / or [
	RegularExpressionBackslashSequence
	RegularExpressionClass
*/
/*
RegularExpressionNonTerminator ::
	SourceCharacter but not LineTerminator
*/
|	<#REGULAR_EXPRESSION_CHAR:
    	~[ "\r" , "\n" , "\u2028" , "\u2029", "\\", "/", "[" ]
	|	<REGULAR_EXPRESSION_BACKSLASH_SEQUENCE>
	|	<REGULAR_EXPRESSION_CLASS>
	>
/*
RegularExpressionFirstChar ::
	RegularExpressionNonTerminator but not one of * or \ or / or [
	RegularExpressionBackslashSequence
	RegularExpressionClass
*/
|	<#REGULAR_EXPRESSION_FIRST_CHAR: 
		~[ "\r" , "\n" , "\u2028" , "\u2029", "*", "\\", "/", "[" ]
	|	<REGULAR_EXPRESSION_BACKSLASH_SEQUENCE>
	|	<REGULAR_EXPRESSION_CLASS>
	>
/*
RegularExpressionBackslashSequence ::
	\ RegularExpressionNonTerminator
*/
|	<#REGULAR_EXPRESSION_BACKSLASH_SEQUENCE:
		"\\" ~[ "\r" , "\n" , "\u2028" , "\u2029" ]
	>
/*
RegularExpressionClass ::
	[ RegularExpressionClassChars ]
*/
|	<#REGULAR_EXPRESSION_CLASS:
		"["
		(
			<REGULAR_EXPRESSION_CLASS_CHAR>
		) *
		"]"
	>
/*
RegularExpressionClassChars ::
	[empty]
	RegularExpressionClassChars RegularExpressionClassChar
*/
/*
RegularExpressionClassChar ::
	RegularExpressionNonTerminator but not one of ] or \
	RegularExpressionBackslashSequence
*/
|	<#REGULAR_EXPRESSION_CLASS_CHAR:
		~[ "\r" , "\n" , "\u2028" , "\u2029", "\\", "]" ]
	|	<REGULAR_EXPRESSION_BACKSLASH_SEQUENCE>
	>
}

/* ========================================================================== */
/* 7.6 Identifier Names and Identifiers */
/* ========================================================================== */

/*
Identifier ::
	IdentifierName but not ReservedWord
*/
String Identifier() : 
{
	Token t;
}
{
	t = <IDENTIFIER_NAME>
	{
		return this.builder.identifier(t.image);
	}
}

/*
IdentifierName ::
	IdentifierStart
	IdentifierName IdentifierPart
*/
JSIdentifierName IdentifierName() :
{
	Token t;
}
{
	t = <IDENTIFIER_NAME>
	{
		return this.builder.identifierName(t.image);
	}
	// TODO
/*|	t = <RESERVED_KEYWORD>
	{
		return this.builder.identifierName(t.image);
	}*/
}

<DEFAULT, NO_REGULAR_EXPRESSION_HERE, NO_LINE_TERMINATOR_HERE>
TOKEN:
{
/*
IdentifierName ::
	IdentifierStart
	IdentifierName IdentifierPart
*/
	<IDENTIFIER_NAME:	<IDENTIFIER_START> ( <IDENTIFIER_PART> ) *>	:NO_REGULAR_EXPRESSION_HERE
/*
IdentifierStart ::
	UnicodeLetter
	$
	_
	\ UnicodeEscapeSequence
*/
|	<#IDENTIFIER_START:
		<UNICODE_LETTER>
	|	"$"
	|	"_"
	|	"\\" <UNICODE_ESCAPE_SEQUENCE> /* Was without \ */
	>
/*
IdentifierPart ::
	IdentifierStart
	UnicodeCombiningMark
	UnicodeDigit
	UnicodeConnectorPunctuation
	<ZWNJ>
	<ZWJ>
*/
|	<#IDENTIFIER_PART: 
		<IDENTIFIER_START>
	|	<UNICODE_COMBINING_MARK>
	|	<UNICODE_DIGIT>
	|	<UNICODE_CONNECTOR_PUNCTUATION>
	|	<ZWNJ>
	|	<ZWJ>
	>
/*
UnicodeLetter ::
	any character in the Unicode categories Uppercase letter (Lu), Lowercase letter (Ll), Titlecase letter 
	(Lt), Modifier letter (Lm), Other letter (Lo), or Letter number (Nl).
*/
|	<#UNICODE_LETTER: 
		["A"-"Z"]
	|	["a"-"z"]
	|	["\u0041"-"\u005A"] 
	|	["\u0061"-"\u007A"] 
	|	["\u00AA"] 
	|	["\u00B5"]
	|	["\u00BA"] 
	|	["\u00C0"-"\u00D6"] 
	|	["\u00D8"-"\u00F6"] 
	|	["\u00F8"-"\u021F"]
	|	["\u0222"-"\u0233"] 
	|	["\u0250"-"\u02AD"] 
	|	["\u02B0"-"\u02B8"] 
	|	["\u02BB"-"\u02C1"]
	|	["\u02D0"-"\u02D1"] 
	|	["\u02E0"-"\u02E4"] 
	|	["\u02EE"] 
	|	["\u037A"]
	|	["\u0386"] 
	|	["\u0388"-"\u038A"]
	|	["\u038C"]
	|	["\u038E"-"\u03A1"]
	|	["\u03A3"-"\u03CE"] 
	|	["\u03D0"-"\u03D7"] 
	|	["\u03DA"-"\u03F3"]
	|	["\u0400"-"\u0481"]
	|	["\u048C"-"\u04C4"]
	|	["\u04C7"-"\u04C8"]
	|	["\u04CB"-"\u04CC"] 
	|	["\u04D0"-"\u04F5"]
	|	["\u04F8"-"\u04F9"]
	|	["\u0531"-"\u0556"]
	|	["\u0559"]
	|	["\u0561"-"\u0587"]
	|	["\u05D0"-"\u05EA"]
	|	["\u05F0"-"\u05F2"] 
	|	["\u0621"-"\u063A"] 
	|	["\u0640"-"\u064A"]
	|	["\u0671"-"\u06D3"]
	|	["\u06D5"] 
	|	["\u06E5"-"\u06E6"] 
	|	["\u06FA"-"\u06FC"]
	|	["\u0710"] 
	|	["\u0712"-"\u072C"] 
	|	["\u0780"-"\u07A5"] 
	|	["\u0905"-"\u0939"]
	|	["\u093D"] 
	|	["\u0950"] 
	|	["\u0958"-"\u0961"] 
	|	["\u0985"-"\u098C"]
	|	["\u098F"-"\u0990"] 
	|	["\u0993"-"\u09A8"] 
	|	["\u09AA"-"\u09B0"] 
	|	["\u09B2"]
	|	["\u09B6"-"\u09B9"] 
	|	["\u09DC"-"\u09DD"] 
	|	["\u09DF"-"\u09E1"] 
	|	["\u09F0"-"\u09F1"]
	|	["\u0A05"-"\u0A0A"] 
	|	["\u0A0F"-"\u0A10"] 
	|	["\u0A13"-"\u0A28"] 
	|	["\u0A2A"-"\u0A30"]
	|	["\u0A32"-"\u0A33"] 
	|	["\u0A35"-"\u0A36"] 
	|	["\u0A38"-"\u0A39"] 
	|	["\u0A59"-"\u0A5C"]
	|	["\u0A5E"] 
	|	["\u0A72"-"\u0A74"] 
	|	["\u0A85"-"\u0A8B"] 
	|	["\u0A8D"]
	|	["\u0A8F"-"\u0A91"] 
	|	["\u0A93"-"\u0AA8"] 
	|	["\u0AAA"-"\u0AB0"] 
	|	["\u0AB2"-"\u0AB3"]
	|	["\u0AB5"-"\u0AB9"] 
	|	["\u0ABD"] 
	|	["\u0AD0"] 
	|	["\u0AE0"]
	|	["\u0B05"-"\u0B0C"] 
	|	["\u0B0F"-"\u0B10"] 
	|	["\u0B13"-"\u0B28"] 
	|	["\u0B2A"-"\u0B30"]
	|	["\u0B32"-"\u0B33"] 
	|	["\u0B36"-"\u0B39"] 
	|	["\u0B3D"] 
	|	["\u0B5C"-"\u0B5D"]
	|	["\u0B5F"-"\u0B61"] 
	|	["\u0B85"-"\u0B8A"]
	|	["\u0B8E"-"\u0B90"] 
	|	["\u0B92"-"\u0B95"]
	|	["\u0B99"-"\u0B9A"] 
	|	["\u0B9C"] 
	|	["\u0B9E"-"\u0B9F"] 
	|	["\u0BA3"-"\u0BA4"]
	|	["\u0BA8"-"\u0BAA"] 
	|	["\u0BAE"-"\u0BB5"] 
	|	["\u0BB7"-"\u0BB9"] 
	|	["\u0C05"-"\u0C0C"]
	|	["\u0C0E"-"\u0C10"] 
	|	["\u0C12"-"\u0C28"]
	|	["\u0C2A"-"\u0C33"]
	|	["\u0C35"-"\u0C39"]
	|	["\u0C60"-"\u0C61"]
	|	["\u0C85"-"\u0C8C"]
	|	["\u0C8E"-"\u0C90"]
	|	["\u0C92"-"\u0CA8"]
	|	["\u0CAA"-"\u0CB3"]
	|	["\u0CB5"-"\u0CB9"]
	|	["\u0CDE"]
	|	["\u0CE0"-"\u0CE1"]
	|	["\u0D05"-"\u0D0C"]
	|	["\u0D0E"-"\u0D10"]
	|	["\u0D12"-"\u0D28"]
	|	["\u0D2A"-"\u0D39"]
	|	["\u0D60"-"\u0D61"]
	|	["\u0D85"-"\u0D96"]
	|	["\u0D9A"-"\u0DB1"]
	|	["\u0DB3"-"\u0DBB"]
	|	["\u0DBD"]
	|	["\u0DC0"-"\u0DC6"]
	|	["\u0E01"-"\u0E30"]
	|	["\u0E32"-"\u0E33"]
	|	["\u0E40"-"\u0E46"]
	|	["\u0E81"-"\u0E82"]
	|	["\u0E84"]
	|	["\u0E87"-"\u0E88"]
	|	["\u0E8A"]
	|	["\u0E8D"]
	|	["\u0E94"-"\u0E97"]
	|	["\u0E99"-"\u0E9F"]
	|	["\u0EA1"-"\u0EA3"]
	|	["\u0EA5"]
	|	["\u0EA7"]
	|	["\u0EAA"-"\u0EAB"]
	|	["\u0EAD"-"\u0EB0"]
	|	["\u0EB2"-"\u0EB3"]
	|	["\u0EBD"-"\u0EC4"]
	|	["\u0EC6"]
	|	["\u0EDC"-"\u0EDD"]
	|	["\u0F00"]
	|	["\u0F40"-"\u0F6A"]
	|	["\u0F88"-"\u0F8B"]
	|	["\u1000"-"\u1021"]
	|	["\u1023"-"\u1027"]
	|	["\u1029"-"\u102A"]
	|	["\u1050"-"\u1055"]
	|	["\u10A0"-"\u10C5"]
	|	["\u10D0"-"\u10F6"]
	|	["\u1100"-"\u1159"]
	|	["\u115F"-"\u11A2"]
	|	["\u11A8"-"\u11F9"]
	|	["\u1200"-"\u1206"]
	|	["\u1208"-"\u1246"]
	|	["\u1248"]
	|	["\u124A"-"\u124D"]
	|	["\u1250"-"\u1256"]
	|	["\u1258"]
	|	["\u125A"-"\u125D"]
	|	["\u1260"-"\u1286"]
	|	["\u1288"]
	|	["\u128A"-"\u128D"]
	|	["\u1290"-"\u12AE"]
	|	["\u12B0"]
	|	["\u12B2"-"\u12B5"]
	|	["\u12B8"-"\u12BE"]
	|	["\u12C0"]
	|	["\u12C2"-"\u12C5"]
	|	["\u12C8"-"\u12CE"]
	|	["\u12D0"-"\u12D6"]
	|	["\u12D8"-"\u12EE"]
	|	["\u12F0"-"\u130E"]
	|	["\u1310"]
	|	["\u1312"-"\u1315"]
	|	["\u1318"-"\u131E"]
	|	["\u1320"-"\u1346"]
	|	["\u1348"-"\u135A"]
	|	["\u13A0"-"\u13B0"]
	|	["\u13B1"-"\u13F4"]
	|	["\u1401"-"\u1676"]
	|	["\u1681"-"\u169A"]
	|	["\u16A0"-"\u16EA"]
	|	["\u1780"-"\u17B3"]
	|	["\u1820"-"\u1877"]
	|	["\u1880"-"\u18A8"]
	|	["\u1E00"-"\u1E9B"]
	|	["\u1EA0"-"\u1EE0"]
	|	["\u1EE1"-"\u1EF9"]
	|	["\u1F00"-"\u1F15"]
	|	["\u1F18"-"\u1F1D"]
	|	["\u1F20"-"\u1F39"]
	|	["\u1F3A"-"\u1F45"]
	|	["\u1F48"-"\u1F4D"]
	|	["\u1F50"-"\u1F57"]
	|	["\u1F59"]
	|	["\u1F5B"]
	|	["\u1F5D"]
	|	["\u1F5F"-"\u1F7D"]
	|	["\u1F80"-"\u1FB4"]
	|	["\u1FB6"-"\u1FBC"]
	|	["\u1FBE"]
	|	["\u1FC2"-"\u1FC4"]
	|	["\u1FC6"-"\u1FCC"]
	|	["\u1FD0"-"\u1FD3"]
	|	["\u1FD6"-"\u1FDB"]
	|	["\u1FE0"-"\u1FEC"]
	|	["\u1FF2"-"\u1FF4"]
	|	["\u1FF6"-"\u1FFC"]
	|	["\u207F"]
	|	["\u2102"]
	|	["\u2107"]
	|	["\u210A"-"\u2113"]
	|	["\u2115"]
	|	["\u2119"-"\u211D"]
	|	["\u2124"]
	|	["\u2126"]
	|	["\u2128"]
	|	["\u212A"-"\u212D"]
	|	["\u212F"-"\u2131"]
	|	["\u2133"-"\u2139"]
	|	["\u2160"-"\u2183"]
	|	["\u3005"-"\u3007"]
	|	["\u3021"-"\u3029"]
	|	["\u3031"-"\u3035"]
	|	["\u3038"-"\u303A"]
	|	["\u3041"-"\u3094"]
	|	["\u309D"-"\u309E"]
	|	["\u30A1"-"\u30FA"]
	|	["\u30FC"-"\u30FE"]
	|	["\u3105"-"\u312C"]
	|	["\u3131"-"\u318E"]
	|	["\u31A0"-"\u31B7"]
	|	["\u3400"]
	|	["\u4DB5"]
	|	["\u4E00"]
	|	["\u9FA5"]
	|	["\uA000"-"\uA48C"]
	|	["\uAC00"]
	|	["\uD7A3"]
	|	["\uF900"-"\uFA2D"]
	|	["\uFB00"-"\uFB06"]
	|	["\uFB13"-"\uFB17"]
	|	["\uFB1D"]
	|	["\uFB1F"-"\uFB28"]
	|	["\uFB2A"-"\uFB36"]
	|	["\uFB38"-"\uFB3C"]
	|	["\uFB3E"]
	|	["\uFB40"-"\uFB41"]
	|	["\uFB43"-"\uFB44"]
	|	["\uFB46"-"\uFBB1"]
	|	["\uFBD3"-"\uFD3D"]
	|	["\uFD50"-"\uFD8F"]
	|	["\uFD92"-"\uFDC7"]
	|	["\uFDF0"-"\uFDFB"]
	|	["\uFE70"-"\uFE72"]
	|	["\uFE74"]
	|	["\uFE76"-"\uFEFC"]
	|	["\uFF21"-"\uFF3A"]
	|	["\uFF41"-"\uFF5A"]
	|	["\uFF66"-"\uFFBE"]
	|	["\uFFC2"-"\uFFC7"]
	|	["\uFFCA"-"\uFFCF"]
	|	["\uFFD2"-"\uFFD7"]
	|	["\uFFDA"-"\uFFDC"]
	>
/*
UnicodeEscapeSequence ::
	u HexDigit HexDigit HexDigit HexDigit
*/
|	<#UNICODE_ESCAPE_SEQUENCE:	"u" <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT>>
/*
UnicodeCombiningMark ::
	any character in the Unicode categories Non-spacing mark (Mn) or Combining spacing mark (Mc)
*/
/* TODO Check characters */
|	<#UNICODE_COMBINING_MARK:
		["\u0300"-"\u034E"] 
	|	["\u0360"-"\u0362"] 
	|	["\u0483"-"\u0486"] 
	|	["\u0591"-"\u05A1"]
	|	["\u05A3"-"\u05B9"] 
	|	["\u05BB"-"\u05BD"] 
	|	["\u05BF"]
	|	["\u05C1"-"\u05C2"]
	|	["\u05C4"]
	|	["\u064B"-"\u0655"] 
	|	["\u0670"]
	|	["\u06D6"-"\u06DC"]
	|	["\u06DF"-"\u06E4"] 
	|	["\u06E7"-"\u06E8"] 
	|	["\u06EA"-"\u06ED"] 
	|	["\u0711"]
	|	["\u0730"-"\u074A"] 
	|	["\u07A6"-"\u07B0"] 
	|	["\u0901"-"\u0903"] 
	|	["\u093C"]
	|	["\u093E"-"\u094D"] 
	|	["\u0951"-"\u0954"] 
	|	["\u0962"-"\u0963"] 
	|	["\u0981"-"\u0983"]
	|	["\u09BC"-"\u09C4"] 
	|	["\u09C7"-"\u09C8"] 
	|	["\u09CB"-"\u09CD"] 
	|	["\u09D7"]
	|	["\u09E2"-"\u09E3"] 
	|	["\u0A02"]
	|	["\u0A3C"]
	|	["\u0A3E"-"\u0A42"]
	|	["\u0A47"-"\u0A48"] 
	|	["\u0A4B"-"\u0A4D"] 
	|	["\u0A70"-"\u0A71"] 
	|	["\u0A81"-"\u0A83"]
	|	["\u0ABC"]
	|	["\u0ABE"-"\u0AC5"] 
	|	["\u0AC7"-"\u0AC9"] 
	|	["\u0ACB"-"\u0ACD"]
	|	["\u0B01"-"\u0B03"] 
	|	["\u0B3C"]
	|	["\u0B3E"-"\u0B43"] 
	|	["\u0B47"-"\u0B48"]
	|	["\u0B4B"-"\u0B4D"] 
	|	["\u0B56"-"\u0B57"] 
	|	["\u0B82"-"\u0B83"] 
	|	["\u0BBE"-"\u0BC2"]
	|	["\u0BC6"-"\u0BC8"] 
	|	["\u0BCA"-"\u0BCD"] 
	|	["\u0BD7"]
	|	["\u0C01"-"\u0C03"]
	|	["\u0C3E"-"\u0C44"] 
	|	["\u0C46"-"\u0C48"] 
	|	["\u0C4A"-"\u0C4D"] 
	|	["\u0C55"-"\u0C56"]
	|	["\u0C82"-"\u0C83"] 
	|	["\u0CBE"-"\u0CC4"] 
	|	["\u0CC6"-"\u0CC8"] 
	|	["\u0CCA"-"\u0CCD"]
	|	["\u0CD5"-"\u0CD6"] 
	|	["\u0D02"-"\u0D03"] 
	|	["\u0D3E"-"\u0D43"] 
	|	["\u0D46"-"\u0D48"]
	|	["\u0D4A"-"\u0D4D"] 
	|	["\u0D57"]
	|	["\u0D82"-"\u0D83"] 
	|	["\u0DCA"]
	|	["\u0DCF"-"\u0DD4"] 
	|	["\u0DD6"]
	|	["\u0DD8"-"\u0DDF"] 
	|	["\u0DF2"-"\u0DF3"]
	|	["\u0E31"]
	|	["\u0E34"-"\u0E3A"] 
	|	["\u0E47"-"\u0E4E"] 
	|	["\u0EB1"]
	|	["\u0EB4"-"\u0EB9"] 
	|	["\u0EBB"-"\u0EBC"] 
	|	["\u0EC8"-"\u0ECD"] 
	|	["\u0F18"-"\u0F19"]
	|	["\u0F35"]
	|	["\u0F37"]
	|	["\u0F39"]
	|	["\u0F3E"-"\u0F3F"]
	|	["\u0F71"-"\u0F84"] 
	|	["\u0F86"-"\u0F87"] 
	|	["\u0F90"-"\u0F97"] 
	|	["\u0F99"-"\u0FBC"]
	|	["\u0FC6"]
	|	["\u102C"-"\u1032"] 
	|	["\u1036"-"\u1039"] 
	|	["\u1056"-"\u1059"]
	|	["\u17B4"-"\u17D3"] 
	|	["\u18A9"]
	|	["\u20D0"-"\u20DC"] 
	|	["\u20E1"]
	|	["\u302A"-"\u302F"] 
	|	["\u3099"-"\u309A"] 
	|	["\uFB1E"]
	|	["\uFE20"-"\uFE23"]
/* TODO */
	|	["\u0903"]
	|	["\u093E"]
	|	["\u093F"]
	|	["\u0940"]
	|	["\u0949"]
	|	["\u094A"]
	|	["\u094B"]
	|	["\u094C"]
	|	["\u0982"]
	|	["\u0983"]
	|	["\u09BE"]
	|	["\u09BF"]
	|	["\u09C0"]
	|	["\u09C7"]
	|	["\u09C8"]
	|	["\u09CB"]
	|	["\u09CC"]
	|	["\u09D7"]
	|	["\u0A03"]
	|	["\u0A3E"]
	|	["\u0A3F"]
	|	["\u0A40"]
	|	["\u0A83"]
	|	["\u0ABE"]
	|	["\u0ABF"]
	|	["\u0AC0"]
	|	["\u0AC9"]
	|	["\u0ACB"]
	|	["\u0ACC"]
	|	["\u0B02"]
	|	["\u0B03"]
	|	["\u0B3E"]
	|	["\u0B40"]
	|	["\u0B47"]
	|	["\u0B48"]
	|	["\u0B4B"]
	|	["\u0B4C"]
	|	["\u0B57"]
	|	["\u0BBE"]
	|	["\u0BBF"]
	|	["\u0BC1"]
	|	["\u0BC2"]
	|	["\u0BC6"]
	|	["\u0BC7"]
	|	["\u0BC8"]
	|	["\u0BCA"]
	|	["\u0BCB"]
	|	["\u0BCC"]
	|	["\u0BD7"]
	|	["\u0C01"]
	|	["\u0C02"]
	|	["\u0C03"]
	|	["\u0C41"]
	|	["\u0C42"]
	|	["\u0C43"]
	|	["\u0C44"]
	|	["\u0C82"]
	|	["\u0C83"]
	|	["\u0CBE"]
	|	["\u0CC0"]
	|	["\u0CC1"]
	|	["\u0CC2"]
	|	["\u0CC3"]
	|	["\u0CC4"]
	|	["\u0CC7"]
	|	["\u0CC8"]
	|	["\u0CCA"]
	|	["\u0CCB"]
	|	["\u0CD5"]
	|	["\u0CD6"]
	|	["\u0D02"]
	|	["\u0D03"]
	|	["\u0D3E"]
	|	["\u0D3F"]
	|	["\u0D40"]
	|	["\u0D46"]
	|	["\u0D47"]
	|	["\u0D48"]
	|	["\u0D4A"]
	|	["\u0D4B"]
	|	["\u0D4C"]
	|	["\u0D57"]
	|	["\u0D82"]
	|	["\u0D83"]
	|	["\u0DCF"]
	|	["\u0DD0"]
	|	["\u0DD1"]
	|	["\u0DD8"]
	|	["\u0DD9"]
	|	["\u0DDA"]
	|	["\u0DDB"]
	|	["\u0DDC"]
	|	["\u0DDD"]
	|	["\u0DDE"]
	|	["\u0DDF"]
	|	["\u0DF2"]
	|	["\u0DF3"]
	|	["\u0F3E"]
	|	["\u0F3F"]
	|	["\u0F7F"]
	|	["\u102C"]
	|	["\u1031"]
	|	["\u1038"]
	|	["\u1056"]
	|	["\u1057"]
	|	["\u17B6"]
	|	["\u17BE"]
	|	["\u17BF"]
	|	["\u17C0"]
	|	["\u17C1"]
	|	["\u17C2"]
	|	["\u17C3"]
	|	["\u17C4"]
	|	["\u17C5"]
	|	["\u17C7"]
	|	["\u17C8"]
	|	["\u1923"]
	|	["\u1924"]
	|	["\u1925"]
	|	["\u1926"]
	|	["\u1929"]
	|	["\u192A"]
	|	["\u192B"]
	|	["\u1930"]
	|	["\u1931"]
	|	["\u1933"]
	|	["\u1934"]
	|	["\u1935"]
	|	["\u1936"]
	|	["\u1937"]
	|	["\u1938"]
	|	["\u19B0"]
	|	["\u19B1"]
	|	["\u19B2"]
	|	["\u19B3"]
	|	["\u19B4"]
	|	["\u19B5"]
	|	["\u19B6"]
	|	["\u19B7"]
	|	["\u19B8"]
	|	["\u19B9"]
	|	["\u19BA"]
	|	["\u19BB"]
	|	["\u19BC"]
	|	["\u19BD"]
	|	["\u19BE"]
	|	["\u19BF"]
	|	["\u19C0"]
	|	["\u19C8"]
	|	["\u19C9"]
	|	["\u1A19"]
	|	["\u1A1A"]
	|	["\u1A1B"]
	|	["\uA802"]
	|	["\uA823"]
	|	["\uA824"]
	|	["\uA827"]
	|	["\u1D16"]
	|	["\u1D16"]
	|	["\u1D16"]
	|	["\u1D16"]
	|	["\u1D16"]
	|	["\u1D17"]
	|	["\u1D17"]
	|	["\u1D17"] 
	>
/*
UnicodeDigit ::
	any character in the Unicode category Decimal number (Nd)
*/
|	<#UNICODE_DIGIT: 
		["\u0030"-"\u0039"] 
	|	["\u0660"-"\u0669"] 
	|	["\u06F0"-"\u06F9"] 
	|	["\u0966"-"\u096F"]
	|	["\u09E6"-"\u09EF"] 
	|	["\u0A66"-"\u0A6F"] 
	|	["\u0AE6"-"\u0AEF"] 
	|	["\u0B66"-"\u0B6F"]
	|	["\u0BE7"-"\u0BEF"] 
	|	["\u0C66"-"\u0C6F"] 
	|	["\u0CE6"-"\u0CEF"] 
	|	["\u0D66"-"\u0D6F"]
	|	["\u0E50"-"\u0E59"] 
	|	["\u0ED0"-"\u0ED9"] 
	|	["\u0F20"-"\u0F29"] 
	|	["\u1040"-"\u1049"]
	|	["\u1369"-"\u1371"] 
	|	["\u17E0"-"\u17E9"] 
	|	["\u1810"-"\u1819"] 
	|	["\uFF10"-"\uFF19"] 
 	>
/*
UnicodeConnectorPunctuation ::
	any character in the Unicode category Connector punctuation (Pc)
*/
|	<#UNICODE_CONNECTOR_PUNCTUATION: 
		["\u005F"] 
	|	["\u203F"-"\u2040"]
	|	["\u30FB"] 
	|	["\uFE33"-"\uFE34"]
	|	["\uFE4D"-"\uFE4F"]
	|	["\uFF3F"]
	|	["\uFF65"]
	>	 	
|	<#ZWNJ:	"\u200D"> 
|	<#ZWJ:	"\u200C">
}

/* ========================================================================== */
/* 7.8.3 Numeric Literals */
/* ========================================================================== */

/*
HexDigit :: one of
	0 1 2 3 4 5 6 7 8 9 a b c d e f A B C D E F
*/
<DEFAULT, NO_REGULAR_EXPRESSION_HERE, NO_LINE_TERMINATOR_HERE>
TOKEN:
{
	<#HEX_DIGIT:
		["0"-"9"]
	|	["a"-"f"]
	|	["A"-"F"]
	>
}

/*
OctalDigit :: one of
	0 1 2 3 4 5 6 7
*/
<DEFAULT, NO_REGULAR_EXPRESSION_HERE, NO_LINE_TERMINATOR_HERE>
TOKEN:
{
	<#OCTAL_DIGIT:	["0"-"7"]>
}

/* ========================================================================== */
/* 11 Expressions */
/* ========================================================================== */


/* 11.1 Primary Expressions */
/* ========================================================================== */

/*
PrimaryExpression :
	this
	Identifier
	Literal
	ArrayLiteral
	ObjectLiteral
	( Expression )
*/
JSPrimaryExpression PrimaryExpression() :
{
	JSObjectLiteral objectLiteral;
	JSExpression expression;
	JSArrayLiteral arrayLiteral;
	JSLiteral literal;
	String identifier;
}
{
	"this"	{SetState(NO_REGULAR_EXPRESSION_HERE);}
	{
		return this.builder._this();
	}
|	identifier = Identifier()	{SetState(NO_REGULAR_EXPRESSION_HERE);}
	{
		return this.builder.identifierReference(identifier);
	}
|	literal = Literal()
	{
		return literal;
	} 
|	arrayLiteral = ArrayLiteral()
	{
		return arrayLiteral;
	}
|	objectLiteral = ObjectLiteral()
	{
		return objectLiteral;
	}
|	"(" expression = Expression() ")"	{SetState(NO_REGULAR_EXPRESSION_HERE);}
	{
		return expression.brackets();
	} 
}
/* ========================================================================== */


/* 11.1.4 Array Initialiser */
/* ========================================================================== */

/*
ArrayLiteral :
	[ Elision_opt ]
	[ ElementList ]
	[ ElementList , Elision_opt ]

ElementList :
	Elision_opt AssignmentExpression
	ElementList , Elision_opt AssignmentExpression

Elision :
	,
	Elision ,
*/

JSArrayLiteral ArrayLiteral() : 
{
	List<JSArrayElement> elementList = new LinkedList<JSArrayElement>();
	JSArrayElement[] elements;
	JSAssignmentExpression expression;
	boolean lastElementWasAssignmentExpression = false;
}
{
	<LBRACKET>
	(
		(
			expression = AssignmentExpression()
			{
				elementList.add(expression);
				lastElementWasAssignmentExpression = true;
			}
		) ?
		(
			","
			{
				if (!lastElementWasAssignmentExpression)
				{
					elementList.add(this.builder.elision());
				}
				lastElementWasAssignmentExpression = false;
			}
			(
				expression = AssignmentExpression()
				{
					elementList.add(expression);
					lastElementWasAssignmentExpression = true;
				}
			) ?
		) *
	)
	{
		final int elementListSize = elementList.size();
		if (!lastElementWasAssignmentExpression && elementListSize > 1)
		{
//			elementList.remove(elementListSize - 1);
		}
	}
	<RBRACKET>	{SetState(NO_REGULAR_EXPRESSION_HERE);}
	{
		elements =  elementList.toArray(new JSArrayElement[elementList.size()]);
		return this.builder.arrayLiteral(elements);
	}
}
/* ========================================================================== */


/* 11.1.5 Object Initialiser */
/* ========================================================================== */

/*
ObjectLiteral :
	{ }
	{ PropertyNameAndValueList }
	{ PropertyNameAndValueList , }
	
PropertyNameAndValueList :
	PropertyAssignment
	PropertyNameAndValueList , PropertyAssignment
*/
JSObjectLiteral ObjectLiteral() :
{
	List<JSPropertyAssignment> propertyNameAndValueList = new LinkedList<JSPropertyAssignment>();
	JSPropertyAssignment propertyAssignment;
}
{
	<LBRACE>
		(
			propertyAssignment = PropertyAssignment()
			{
				propertyNameAndValueList.add(propertyAssignment);
			}
			(
				/* TODO this can be improved. */
				LOOKAHEAD("," PropertyAssignment())
				","
				propertyAssignment = PropertyAssignment()
				{
					propertyNameAndValueList.add(propertyAssignment);
				}
			) *
			(
				","
			) ?
		) ?
	<RBRACE>	{SetState(NO_REGULAR_EXPRESSION_HERE);}
	{
		JSPropertyAssignment[] propertyAssignments = propertyNameAndValueList.toArray(new JSPropertyAssignment[propertyNameAndValueList.size()]);
		return this.builder.objectLiteral(propertyAssignments);
	}
}

/*
PropertyAssignment :
	PropertyName : AssignmentExpression
	get PropertyName ( ) { FunctionBody }
	set PropertyName ( PropertySetParameterList ) { FunctionBody }
*/
JSPropertyAssignment PropertyAssignment() : 
{
	JSPropertyName key;
	JSAssignmentExpression expression;
	String parameter;
	JSSourceElement[] body;
}
{
	LOOKAHEAD( { getToken(1).kind == IDENTIFIER_NAME && "get".equals(getToken(1).image) } )
	<IDENTIFIER_NAME>
	(
		":"
		expression = AssignmentExpression()
		{
			return this.builder.property(this.builder.identifierName("get"), expression);
		}
	|	key = PropertyName()
		"("
		")"
		"{"
		body = FunctionBody()
		"}"
		{
			return this.builder.getter(key, body);
		}
	)
|	LOOKAHEAD( { getToken(1).kind == IDENTIFIER_NAME && "set".equals(getToken(1).image) } )
	<IDENTIFIER_NAME>
	(
		":"
		expression = AssignmentExpression()
		{
			return this.builder.property(this.builder.identifierName("set"), expression);
		}
	|	key = PropertyName()
		"("
		parameter = PropertySetParameterList()
		")"
		"{"
		body = FunctionBody()
		"}"
		{
			return this.builder.setter(key, parameter, body);
		}
	)
|	key = PropertyName()
	":"
	expression = AssignmentExpression()
	{
		return this.builder.property(key, expression);
	}
	
}

/*
PropertyName :
	IdentifierName
	StringLiteral
	NumericLiteral
*/
JSPropertyName PropertyName() :
{
	JSPropertyName propertyName;
}
{
	propertyName = IdentifierName()
	{
		return propertyName;
	}
|	propertyName = StringLiteral()
	{
		return propertyName;
	}
|	propertyName = DecimalLiteral()
	{
		return propertyName;
	}
}

/*
PropertySetParameterList :
	Identifier
*/
String PropertySetParameterList() :
{
	String parameter;
}
{
	parameter = Identifier()
	{
		return parameter;
	}
}

/* ========================================================================== */

/* 11.2 Left-Hand-Side Expressions */

/*
MemberExpression :
	PrimaryExpression
	FunctionExpression
	MemberExpression [ Expression ]
	MemberExpression . IdentifierName
	new MemberExpression Arguments
*/
JSMemberExpression MemberExpression() :
{
	JSMemberExpression memberExpression;
	JSExpression element;
	JSIdentifierName identifierName;
	JSAssignmentExpression[] arguments;
}
{
	(
		memberExpression = PrimaryExpression()
	|	memberExpression = FunctionExpression()
	)
	(
		LOOKAHEAD("[" | ".")
		(
			"["
			element = Expression()
			"]"	{SetState(NO_REGULAR_EXPRESSION_HERE);}
			{
				memberExpression = memberExpression.element(element);
			}
		|	"."
			identifierName = IdentifierName()
			{
				memberExpression = memberExpression.property(identifierName);
			}
		)
	) *
	{
		return memberExpression;
	}
|	memberExpression = NewMemberExpressionArguments()
	{
		return memberExpression;
	}
}

/*
new MemberExpression Arguments
*/
JSMemberExpression NewMemberExpressionArguments() :
{
	JSMemberExpression memberExpression;
	JSAssignmentExpression[] arguments;
}
{
	"new"
	memberExpression = MemberExpression()
	arguments = Arguments()
	{
		return memberExpression.instantiate().args(arguments);
	}
}

/*
NewExpression :
	MemberExpression
	new NewExpression
=>
NewExpression : (new)* MemberExpression
*/
JSNewExpression NewExpression() :
{
	JSMemberExpression memberExpression;
	JSNewExpression newExpression;
}
{
	// TODO Could be improved (without semantic lookahead)
	LOOKAHEAD(MemberExpression())
	memberExpression = MemberExpression()
	{
		return memberExpression;
	}
|	"new"
	newExpression = NewExpression()
	{
		return newExpression._new(); 
	}
}

/*
CallExpression :
	MemberExpression Arguments
	CallExpression Arguments
	CallExpression [ Expression ]
	CallExpression . IdentifierName
=>	
CallExpression : MemberExpression Arguments ( Arguments | [ Expression ] | . IdentifierName) *
*/
JSCallExpression CallExpression() :
{
	JSCallExpression callExpression;
	JSMemberExpression memberExpression;
	JSAssignmentExpression[] arguments;
	JSExpression element;
	JSIdentifierName identifierName;
}
{
	memberExpression = MemberExpression()
	arguments = Arguments()
	{
		callExpression = memberExpression.invoke().args(arguments);
	}
	(
		LOOKAHEAD("(" | "[" | ".")
		(
			arguments = Arguments()
			{
				callExpression =  callExpression.invoke().args(arguments);
			}
		|	"["
			element = Expression()
			"]" {SetState(NO_REGULAR_EXPRESSION_HERE);}
			{
				callExpression = callExpression.element(element);
			}
		|	"."
			identifierName = IdentifierName()
			{
				callExpression = callExpression.property(identifierName);
			}
		)
	) *
	{
		return callExpression;
	}
}

/*
Arguments :
	( )
	( ArgumentList )

ArgumentList :
	AssignmentExpression
	ArgumentList , AssignmentExpression
*/
JSAssignmentExpression[] Arguments() :
{
	JSAssignmentExpression expression;
	List<JSAssignmentExpression> argumentList = new LinkedList<JSAssignmentExpression>();
}
{
	"("
		(
			expression = AssignmentExpression()
			{
				argumentList.add(expression);
			}
			(
				","
				expression = AssignmentExpression()
				{
					argumentList.add(expression);
				}
			) *				
		) ?
	")" {SetState(NO_REGULAR_EXPRESSION_HERE);}
	{
		return argumentList.toArray(new JSAssignmentExpression[argumentList.size()]);
	}
}

/*
LeftHandSideExpression :
	NewExpression
	CallExpression
*/

JSLeftHandSideExpression LeftHandSideExpression() :
{
	JSNewExpression newExpression;
	JSCallExpression callExpression;
}
{
	// CallExpression starts with MemberExpression and MUST have
	// trailing Arguments. This can be used to distinguish
	// CallExpression and NewExpression here. If there is no "(" after
	// MemberExpression, this is not a CallExpression.
	LOOKAHEAD(MemberExpression() "(")
	callExpression = CallExpression()
	{
		return callExpression;
	}
|	newExpression = NewExpression()
	{
		return newExpression;
	}
}
/* ========================================================================== */


/* ========================================================================== */
/* ========================================================================== */
/* ========================================================================== */
/* =====================CONTINUE=FROM=HERE=================================== */
/* ========================================================================== */
/* ========================================================================== */
/* ========================================================================== */


/* 11.3 Postfix Expressions */
/* ========================================================================== */

/*
PostfixExpression :
	LeftHandSideExpression
	LeftHandSideExpression [no LineTerminator here] ++
	LeftHandSideExpression [no LineTerminator here] --
*/
JSPostfixExpression PostfixExpression() :
{
	JSLeftHandSideExpression expression;
}
{
	expression = LeftHandSideExpression()
	(
		LOOKAHEAD ( <INCR>, { !TokenUtils.precededByLineTerminator(getToken(1))} )
		<INCR>
	 	{
	 		return expression.postIncr();
	 	}
	|	LOOKAHEAD ( <DECR>, { !TokenUtils.precededByLineTerminator(getToken(1))} )
		<DECR>
		{
			return expression.postDecr();
		}
	) ?
	{
		return expression;
	}
}

/* 11.4 Unary Operators */
/* ========================================================================== */


/*
UnaryExpression :
	PostfixExpression
	delete UnaryExpression
	void UnaryExpression
	typeof UnaryExpression
	++ UnaryExpression
	-- UnaryExpression
	+ UnaryExpression
	- UnaryExpression
	~ UnaryExpression
	! UnaryExpression
*/

JSUnaryExpression UnaryExpression() :
{
	JSUnaryExpression expression;
}
{
	"delete"
	expression = UnaryExpression()
	{
		return expression.delete();
	}
|	"void"
	expression = UnaryExpression()
	{
		return expression._void();
	}
|	"typeof"
	expression = UnaryExpression()
	{
		return expression.typeof();
	}
|	"++"
	expression = UnaryExpression()
	{
		return expression.preIncr();
	}
|	"--"
	expression = UnaryExpression()
	{
		return expression.preDecr();
	}
|	"+"
	expression = UnaryExpression()
	{
		return expression.positive();
	}
|	"-"
	expression = UnaryExpression()
	{
		return expression.negative();
	}
|	"~"
	expression = UnaryExpression()
	{
		return expression.complement();
	}
|	"!"
	expression = UnaryExpression()
	{
		return expression.not();
	}
|	expression = PostfixExpression()
	{
		return expression;
	}
}

/* 11.5 Multiplicative Operators */
/* ========================================================================== */


/*
MultiplicativeExpression :
	UnaryExpression
	MultiplicativeExpression * UnaryExpression
	MultiplicativeExpression / UnaryExpression
	MultiplicativeExpression % UnaryExpression
*/
JSMultiplicativeExpression MultiplicativeExpression() :
{
	JSMultiplicativeExpression expression0;
	JSUnaryExpression expression1;
}
{
	expression0 = UnaryExpression()
	(
		<STAR>
		expression1 = UnaryExpression()
		{
			expression0 = expression0.mul(expression1);
		}
	|	<SLASH>
		expression1 = UnaryExpression()
		{
			expression0 = expression0.div(expression1);
		}
	|	<REM>
		expression1 = UnaryExpression()
		{
			expression0 = expression0.mod(expression1);
		}
	) *
	{
		SetState(DEFAULT);
		return expression0;
	}
}

/* 11.6 Additive Operators */
/* ========================================================================== */


/*
AdditiveExpression :
	MultiplicativeExpression
	AdditiveExpression + MultiplicativeExpression
	AdditiveExpression - MultiplicativeExpression
*/
JSAdditiveExpression AdditiveExpression() :
{
	JSAdditiveExpression expression0;
	JSMultiplicativeExpression expression1;
}
{
	expression0 = MultiplicativeExpression()
	(
		"+"
		expression1 = MultiplicativeExpression()
		{
			expression0 = expression0.plus(expression1);
		}
	|	"-"
		expression1 = MultiplicativeExpression()
		{
			expression0 = expression0.minus(expression1);
		}
	) *
	{
		return expression0;
	}
}

/* 11.7 Bitwise Shift Operators */
/* ========================================================================== */


/*
ShiftExpression :
	AdditiveExpression
	ShiftExpression << AdditiveExpression
	ShiftExpression >> AdditiveExpression
	ShiftExpression >>> AdditiveExpression
*/
JSShiftExpression ShiftExpression() :
{
	JSShiftExpression expression0;
	JSAdditiveExpression expression1;
}
{
	expression0 = AdditiveExpression()
	(
		"<<"
		expression1 = AdditiveExpression()
		{
			expression0 = expression0.shl(expression1);
		}
	|	">>"
		expression1 = AdditiveExpression()
		{
			expression0 = expression0.shr(expression1);
		}
	|	">>>"
		expression1 = AdditiveExpression()
		{
			expression0 = expression0.shrz(expression1);
		}
	) *
	{
		return expression0;
	}
}

/* 11.8 Relational Operators */
/* ========================================================================== */


/*
RelationalExpression :
	ShiftExpression
	RelationalExpression < ShiftExpression
	RelationalExpression > ShiftExpression
	RelationalExpression <= ShiftExpression
	RelationalExpression >= ShiftExpression
	RelationalExpression instanceof ShiftExpression
	RelationalExpression in ShiftExpression
*/
JSRelationalExpression RelationalExpression() :
{
	JSRelationalExpression expression0;
	JSShiftExpression expression1;
}
{
	expression0 = ShiftExpression()
	(
		"<"
		expression1 = ShiftExpression()
		{
			expression0 = expression0.lt(expression1);
		}
	|	">"
		expression1 = ShiftExpression()
		{
			expression0 = expression0.gt(expression1);
		}
	|	"<="
		expression1 = ShiftExpression()
		{
			expression0 = expression0.le(expression1);
		}
	|	">="
		expression1 = ShiftExpression()
		{
			expression0 = expression0.ge(expression1);
		}
	|	"instanceof"
		expression1 = ShiftExpression()
		{
			expression0 = expression0._instanceof(expression1);
		}
	|	"in"
		expression1 = ShiftExpression()
		{
			expression0 = expression0.in(expression1);
		}
	) *
	{
		return expression0;
	}
}

/*
RelationalExpressionNoIn :
	ShiftExpression
	RelationalExpressionNoIn < ShiftExpression
	RelationalExpressionNoIn > ShiftExpression
	RelationalExpressionNoIn <= ShiftExpression
	RelationalExpressionNoIn >= ShiftExpression
	RelationalExpressionNoIn instanceof ShiftExpression
*/
/* TODO JSRelationalExpressionNoIn */ 
JSRelationalExpression RelationalExpressionNoIn() :
{
	JSRelationalExpression expression0;
	JSShiftExpression expression1;
}
{
	expression0 = ShiftExpression()
	(
		"<"
		expression1 = ShiftExpression()
		{
			expression0 = expression0.lt(expression1);
		}
	|	">"
		expression1 = ShiftExpression()
		{
			expression0 = expression0.gt(expression1);
		}
	|	"<="
		expression1 = ShiftExpression()
		{
			expression0 = expression0.le(expression1);
		}
	|	">="
		expression1 = ShiftExpression()
		{
			expression0 = expression0.ge(expression1);
		}
	|	"instanceof"
		expression1 = ShiftExpression()
		{
			expression0 = expression0._instanceof(expression1);
		}
	) *
	{
		return expression0;
	}
}

/* 11.9 Equality Operators */
/* ========================================================================== */


/*
EqualityExpression :
	RelationalExpression
	EqualityExpression == RelationalExpression
	EqualityExpression != RelationalExpression
	EqualityExpression === RelationalExpression
	EqualityExpression !== RelationalExpression
*/
JSEqualityExpression EqualityExpression() :
{
	JSEqualityExpression expression0;
	JSRelationalExpression expression1;
}
{
	expression0 = RelationalExpression()
	(
		"=="
		expression1 = RelationalExpression()
		{
			expression0 = expression0.eq(expression1);
		}
	|	"!="
		expression1 = RelationalExpression()
		{
			expression0 = expression0.ne(expression1);
		}
	|	"==="
		expression1 = RelationalExpression()
		{
			expression0 = expression0.eeq(expression1);
		}
	|	"!=="
		expression1 = RelationalExpression()
		{
			expression0 = expression0.nee(expression1);
		}
	) *
	{
		return expression0;
	}
}

/*
EqualityExpressionNoIn :
	RelationalExpressionNoIn
	EqualityExpressionNoIn == RelationalExpressionNoIn
	EqualityExpressionNoIn != RelationalExpressionNoIn
	EqualityExpressionNoIn === RelationalExpressionNoIn
	EqualityExpressionNoIn !== RelationalExpressionNoIn
*/
/* TODO EqualityExpressionNoIn */
JSEqualityExpression EqualityExpressionNoIn() :
{
	JSEqualityExpression expression0;
	JSRelationalExpression expression1;
}
{
	expression0 = RelationalExpressionNoIn()
	(
		"=="
		expression1 = RelationalExpressionNoIn()
		{
			expression0 = expression0.eq(expression1);
		}
	|	"!="
		expression1 = RelationalExpressionNoIn()
		{
			expression0 = expression0.ne(expression1);
		}
	|	"==="
		expression1 = RelationalExpressionNoIn()
		{
			expression0 = expression0.eeq(expression1);
		}
	|	"!=="
		expression1 = RelationalExpressionNoIn()
		{
			expression0 = expression0.nee(expression1);
		}
	) *
	{
		return expression0;
	}
}


/* 11.10 Binary Bitwise Operators */
/* ========================================================================== */


/*
BitwiseANDExpression :
	EqualityExpression
	BitwiseANDExpression & EqualityExpression
*/
JSBitwiseANDExpression BitwiseANDExpression() :
{
	JSBitwiseANDExpression expression0;
	JSEqualityExpression expression1;
}
{
	expression0 = EqualityExpression()
	(
		"&"
		expression1 = EqualityExpression()
		{
			expression0 = expression0.band(expression1);
		}
	) *
	{
		return expression0;
	}
}

/*
BitwiseANDExpressionNoIn :
	EqualityExpressionNoIn
	BitwiseANDExpressionNoIn & EqualityExpressionNoIn
*/
/* TODO BitwiseANDExpressionNoIn */
JSBitwiseANDExpression BitwiseANDExpressionNoIn() :
{
	JSBitwiseANDExpression expression0;
	JSEqualityExpression expression1;
}
{
	expression0 = EqualityExpressionNoIn()
	(
		"&"
		expression1 = EqualityExpressionNoIn()
		{
			expression0 = expression0.band(expression1);
		}
	) *
	{
		return expression0;
	}
}

/*
BitwiseXORExpression :
	BitwiseANDExpression
	BitwiseXORExpression ^ BitwiseANDExpression
*/
JSBitwiseXORExpression BitwiseXORExpression() :
{
	JSBitwiseXORExpression expression0;
	JSBitwiseANDExpression expression1;
}
{
	expression0 = BitwiseANDExpression()
	(
		"^"
		expression1 = BitwiseANDExpression()
		{
			expression0 = expression0.xor(expression1);
		}
	) *
	{
		return expression0;
	}
}

/*
BitwiseXORExpressionNoIn :
	BitwiseANDExpressionNoIn
	BitwiseXORExpressionNoIn ^ BitwiseANDExpressionNoIn
*/
/* TODO BitwiseXORExpressionNoIn */
JSBitwiseXORExpression BitwiseXORExpressionNoIn() :
{
	JSBitwiseXORExpression expression0;
	JSBitwiseANDExpression expression1;
}
{
	expression0 = BitwiseANDExpressionNoIn()
	(
		"^"
		expression1 = BitwiseANDExpressionNoIn()
		{
			expression0 = expression0.xor(expression1);
		}
	) *
	{
		return expression0;
	}
}

/*
BitwiseORExpression :
	BitwiseXORExpression
	BitwiseORExpression | BitwiseXORExpression
*/
JSBitwiseORExpression BitwiseORExpression() :
{
	JSBitwiseORExpression expression0;
	JSBitwiseXORExpression expression1;
}
{
	expression0 = BitwiseXORExpression()
	(
		"|"
		expression1 = BitwiseXORExpression()
		{
			expression0 = expression0.bor(expression1);
		}
	) *
	{
		return expression0;
	}
}

/*
BitwiseORExpressionNoIn :
	BitwiseXORExpressionNoIn
	BitwiseORExpressionNoIn | BitwiseXORExpressionNoIn
*/
/* TODO BitwiseORExpressionNoIn */
JSBitwiseORExpression BitwiseORExpressionNoIn() :
{
	JSBitwiseORExpression expression0;
	JSBitwiseXORExpression expression1;
}
{
	expression0 = BitwiseXORExpressionNoIn()
	(
		"|"
		expression1 = BitwiseXORExpressionNoIn()
		{
			expression0 = expression0.bor(expression1);
		}
	) *
	{
		return expression0;
	}
}

/* 11.11 Binary Logical Operators */
/* ========================================================================== */

/*
LogicalANDExpression :
	BitwiseORExpression
	LogicalANDExpression && BitwiseORExpression
*/
JSLogicalANDExpression LogicalANDExpression() :
{
	JSLogicalANDExpression expression0;
	JSBitwiseORExpression expression1;
}
{
	expression0 = BitwiseORExpression()
	(
		"&&"
		expression1 = BitwiseORExpression()
		{
			expression0 = expression0.and(expression1);
		}
	) *
	{
		return expression0;
	}
}

/*
LogicalANDExpressionNoIn :
	BitwiseORExpressionNoIn
	LogicalANDExpressionNoIn && BitwiseORExpressionNoIn
*/
/* TODO LogicalANDExpressionNoIn */
JSLogicalANDExpression LogicalANDExpressionNoIn() :
{
	JSLogicalANDExpression expression0;
	JSBitwiseORExpression expression1;
}
{
	expression0 = BitwiseORExpressionNoIn()
	(
		"&&"
		expression1 = BitwiseORExpressionNoIn()
		{
			expression0 = expression0.and(expression1);
		}
	) *
	{
		return expression0;
	}
}

/*
LogicalORExpression :
	LogicalANDExpression
	LogicalORExpression || LogicalANDExpression
*/
JSLogicalORExpression LogicalORExpression() :
{
	JSLogicalORExpression expression0;
	JSLogicalANDExpression expression1;
}
{
	expression0 = LogicalANDExpression()
	(
		"||"
		expression1 = LogicalANDExpression()
		{
			expression0 = expression0.or(expression1);
		}
	) *
	{
		return expression0;
	}
}

/*
LogicalORExpressionNoIn :
	LogicalANDExpressionNoIn
	LogicalORExpressionNoIn || LogicalANDExpressionNoIn
*/
/* TODO LogicalORExpressionNoIn */
JSLogicalORExpression LogicalORExpressionNoIn() :
{
	JSLogicalORExpression expression0;
	JSLogicalANDExpression expression1;
}
{
	expression0 = LogicalANDExpressionNoIn()
	(
		"||"
		expression1 = LogicalANDExpressionNoIn()
		{
			expression0 = expression0.or(expression1);
		}
	) *
	{
		return expression0;
	}
}

/* 11.12 Conditional Operator ( ? : ) */

/*
ConditionalExpression :
	LogicalORExpression
	LogicalORExpression ? AssignmentExpression : AssignmentExpression
*/
JSConditionalExpression ConditionalExpression() :
{
	JSLogicalORExpression expression0;
	JSAssignmentExpression expression1;
	JSAssignmentExpression expression2;
}
{
	expression0 = LogicalORExpression()
	(
		"?"
		expression1 = AssignmentExpression()
		":"
		expression2 = AssignmentExpression()
		{
			return expression0.cond(expression1, expression2);
		}
	) ?
	{
		return expression0;
	}
}

/*
ConditionalExpressionNoIn :
	LogicalORExpressionNoIn
	LogicalORExpressionNoIn ? AssignmentExpression : AssignmentExpressionNoIn
*/
/* TODO ConditionalExpressionNoIn */
JSConditionalExpression ConditionalExpressionNoIn() :
{
	JSLogicalORExpression expression0;
	JSAssignmentExpression expression1;
	JSAssignmentExpression expression2;
}
{
	expression0 = LogicalORExpressionNoIn()
	(
		"?"
		expression1 = AssignmentExpression()
		":"
		expression2 = AssignmentExpressionNoIn()
		{
			return expression0.cond(expression1, expression2);
		}
	) ?
	{
		return expression0;
	}
}

/* 11.13 Assignment Operators */
/* ========================================================================== */


/*
AssignmentExpression :
	ConditionalExpression
	LeftHandSideExpression = AssignmentExpression 
	LeftHandSideExpression AssignmentOperator AssignmentExpression
*/
/*
AssignmentOperator : one of
	*= /= %= += -= <<= >>= >>>= &= ^= |=
*/
JSAssignmentExpression AssignmentExpression() :
{
	JSLeftHandSideExpression expression0;
	JSAssignmentExpression expression1;
	JSConditionalExpression expression;
}
{
	LOOKAHEAD
	(
		LeftHandSideExpression()
		(
			"="
		|	"*="
		|	<SLASHASSIGN>
		|	"%="
		|	"+="
		|	"-="
		|	"<<="
		|	">>="
		|	">>>="
		|	"&="
		|	"^="
		|	"|="
		)
	)
	expression0 = LeftHandSideExpression()
	(
		"="
		expression1 = AssignmentExpression()
		{
			return expression0.assign(expression1);
		}
	|	"*="
		expression1 = AssignmentExpression()
		{
			return expression0.mulAssign(expression1);
		}
	|	<SLASHASSIGN>
		expression1 = AssignmentExpression()
		{
			return expression0.divAssign(expression1);
		}
	|	"%="
		expression1 = AssignmentExpression()
		{
			return expression0.modAssign(expression1);
		}
	|	"+="
		expression1 = AssignmentExpression()
		{
			return expression0.plusAssign(expression1);
		}
	|	"-="
		expression1 = AssignmentExpression()
		{
			return expression0.minusAssign(expression1);
		}
	|	"<<="
		expression1 = AssignmentExpression()
		{
			return expression0.shlAssign(expression1);
		}
	|	">>="
		expression1 = AssignmentExpression()
		{
			return expression0.shrAssign(expression1);
		}
	|	">>>="
		expression1 = AssignmentExpression()
		{
			return expression0.shrzAssign(expression1);
		}
	|	"&="
		expression1 = AssignmentExpression()
		{
			return expression0.bandAssign(expression1);
		}
	|	"^="
		expression1 = AssignmentExpression()
		{
			return expression0.xorAssign(expression1);
		}
	|	"|="
		expression1 = AssignmentExpression()
		{
			return expression0.borAssign(expression1);
		}
	) 
|	expression = ConditionalExpression()
	{
		return expression;
	} 
}

/*
AssignmentExpressionNoIn :
	ConditionalExpressionNoIn
	LeftHandSideExpression = AssignmentExpressionNoIn
	LeftHandSideExpression AssignmentOperator AssignmentExpressionNoIn
*/
/* TODO AssignmentExpressionNoIn */
JSAssignmentExpression AssignmentExpressionNoIn() :
{
	JSLeftHandSideExpression expression0;
	JSAssignmentExpression expression1;
	JSConditionalExpression expression;
}
{
	LOOKAHEAD
	(
		LeftHandSideExpression()
		(
			"="
		|	"*="
		|	<SLASHASSIGN>
		|	"%="
		|	"+="
		|	"-="
		|	"<<="
		|	">>="
		|	">>>="
		|	"&="
		|	"^="
		|	"|="
		)
	)
	expression0 = LeftHandSideExpression()
	(
		"="
		expression1 = AssignmentExpressionNoIn()
		{
			return expression0.assign(expression1);
		}
	|	"*="
		expression1 = AssignmentExpressionNoIn()
		{
			return expression0.mulAssign(expression1);
		}
	|	<SLASHASSIGN>
		expression1 = AssignmentExpressionNoIn()
		{
			return expression0.divAssign(expression1);
		}
	|	"%="
		expression1 = AssignmentExpressionNoIn()
		{
			return expression0.modAssign(expression1);
		}
	|	"+="
		expression1 = AssignmentExpressionNoIn()
		{
			return expression0.plusAssign(expression1);
		}
	|	"-="
		expression1 = AssignmentExpressionNoIn()
		{
			return expression0.minusAssign(expression1);
		}
	|	"<<="
		expression1 = AssignmentExpressionNoIn()
		{
			return expression0.shlAssign(expression1);
		}
	|	">>="
		expression1 = AssignmentExpressionNoIn()
		{
			return expression0.shrAssign(expression1);
		}
	|	">>>="
		expression1 = AssignmentExpressionNoIn()
		{
			return expression0.shrzAssign(expression1);
		}
	|	"&="
		expression1 = AssignmentExpressionNoIn()
		{
			return expression0.bandAssign(expression1);
		}
	|	"^="
		expression1 = AssignmentExpressionNoIn()
		{
			return expression0.xorAssign(expression1);
		}
	|	"|="
		expression1 = AssignmentExpressionNoIn()
		{
			return expression0.borAssign(expression1);
		}
	) 
|	expression = ConditionalExpressionNoIn()
	{
		return expression;
	} 
}


/* 11.14 Comma Operator ( , ) */
/* ========================================================================== */

/*
Expression :
	AssignmentExpression
	Expression , AssignmentExpression
*/

JSExpression Expression() :
{
	JSExpression expression0;
	JSAssignmentExpression expression1;
}
{
	expression0 = AssignmentExpression()
	(
		","
		expression1 = AssignmentExpression()
		{
			expression0 = expression0.comma(expression1);
		}
	)*
	{
		return expression0;
	}
}

/*
ExpressionNoIn :
	AssignmentExpressionNoIn
	ExpressionNoIn , AssignmentExpressionNoIn
*/
/* TODO ExpressionNoIn */
JSExpression ExpressionNoIn() :
{
	JSExpression expression0;
	JSAssignmentExpression expression1;
}
{
	expression0 = AssignmentExpressionNoIn()
	(
		","
		expression1 = AssignmentExpressionNoIn()
		{
			expression0 = expression0.comma(expression1);
		}
	)*
	{
		return expression0;
	}
}

/* 12 Statements */
/* ========================================================================== */

/*
Syntax
	Statement :
	Block
	VariableStatement
	EmptyStatement
	ExpressionStatement
	IfStatement
	IterationStatement
	ContinueStatement
	BreakStatement
	ReturnStatement
	WithStatement
	LabelledStatement
	SwitchStatement
	ThrowStatement
	TryStatement
	DebuggerStatement
*/

JSStatement Statement() :
{
	JSStatement statement;
}
{
	(
		LOOKAHEAD("{")
		statement = Block()
	|	statement = VariableStatement()
	|	statement = EmptyStatement()
	|	LOOKAHEAD (<IDENTIFIER_NAME> ":")
		statement = LabelledStatement()
	|	statement = ExpressionStatement()
	|	statement = IfStatement()
	|	statement = IterationStatement()
	|	statement = ContinueStatement()
	|	statement = BreakStatement()
	|	statement = ReturnStatement()
	|	statement = WithStatement()
	|	statement = SwitchStatement()
	|	statement = ThrowStatement()
	|	statement = TryStatement()
	|	statement = DebuggerStatement()
	)
	{
		return statement;
	}
}

/* 12.1 Block */
/* ========================================================================== */

/*
Block :
	{ StatementList_opt }
*/
JSBlock Block() :
{
	JSStatement[] statementList;
}
{
	"{"
	statementList = StatementListOpt()
	"}"
	{
		return this.builder.block(statementList);
	}
}

/*
StatementList :
	Statement
	StatementList Statement
*/
JSStatement[] StatementListOpt() :
{
	List<JSStatement> statementList = new LinkedList<JSStatement>();
	JSStatement statement;
}
{
	(
		statement = Statement()
		{
			statementList.add(statement);
		}		
	) *
	{
		return statementList.toArray(new JSStatement[statementList.size()]);
	}
}

/* 12.2 Variable Statement */
/* ========================================================================== */

/*
VariableStatement :
	var VariableDeclarationList ;
*/

JSVariableStatement VariableStatement() :
{
	JSVariableDeclaration[] variableDeclarationList;
}
{
	"var"
	variableDeclarationList = VariableDeclarationList()
	AutomaticSemicolonInsertion()
	{
		return this.builder.variableStatement(variableDeclarationList);
	}
}

/*
VariableDeclarationList :
	VariableDeclaration
	VariableDeclarationList , VariableDeclaration
*/
JSVariableDeclaration[] VariableDeclarationList() :
{
	List<JSVariableDeclaration> variableDeclarationList = new LinkedList<JSVariableDeclaration>();
	JSVariableDeclaration variableDeclaration;
}
{
	variableDeclaration = VariableDeclaration()
	{
		variableDeclarationList.add(variableDeclaration);
	}
	(
		","
		variableDeclaration = VariableDeclaration()
		{
			variableDeclarationList.add(variableDeclaration);
		}
	) *
	{
		return variableDeclarationList.toArray(new JSVariableDeclaration[variableDeclarationList.size()]);
	}
}

/*
VariableDeclarationListNoIn :
	VariableDeclarationNoIn
	VariableDeclarationListNoIn , VariableDeclarationNoIn
*/
/* VariableDeclarationNoIn */
JSVariableDeclaration[] VariableDeclarationListNoIn() :
{
	List<JSVariableDeclaration> variableDeclarationList = new LinkedList<JSVariableDeclaration>();
	JSVariableDeclaration variableDeclaration;
}
{
	variableDeclaration = VariableDeclarationNoIn()
	(
		","
		variableDeclaration = VariableDeclarationNoIn()
		{
			variableDeclarationList.add(variableDeclaration);
		}
	) *
	{
		return variableDeclarationList.toArray(new JSVariableDeclaration[variableDeclarationList.size()]);
	}
}

/*
VariableDeclaration :
	Identifier Initialiser_opt
*/
JSVariableDeclaration VariableDeclaration() :
{
	String identifier;
	JSAssignmentExpression initializer;
}
{
	identifier = Identifier()
	(
		initializer = Initializer()
		{
			return this.builder.variableDeclaration(identifier, initializer);
		}
	) ?
	{
		return this.builder.variableDeclaration(identifier);
	}
}

/*
VariableDeclarationNoIn :
	Identifier InitialiserNoIn_opt
*/
/* TODO VariableDeclarationNoIn */
JSVariableDeclaration VariableDeclarationNoIn() :
{
	String identifier;
	JSAssignmentExpression initializer;
}
{
	identifier = Identifier()
	(
		initializer = InitializerNoIn()
		{
			return this.builder.variableDeclaration(identifier, initializer);
		}
	) ?
	{
		return this.builder.variableDeclaration(identifier);
	}
}

/*
Initialiser :
	= AssignmentExpression
*/
JSAssignmentExpression Initializer() :
{
	JSAssignmentExpression initializer;
}
{
	"="
	initializer = AssignmentExpression()
	{
		return initializer;
	}
}

/*
InitialiserNoIn :
	= AssignmentExpressionNoIn
*/
/* TODO JSAssignmentExpressionNoIn */
JSAssignmentExpression InitializerNoIn() :
{
	JSAssignmentExpression initializer;
}
{
	"="
	initializer = AssignmentExpressionNoIn()
	{
		return initializer;
	}
}

/* 12.3 Empty Statement */
/* ========================================================================== */

/*
EmptyStatement :
	;
*/
JSEmptyStatement EmptyStatement() :
{}
{
	";"
	{
		return this.builder.emptyStatement();
	}
}

/* 12.4 Expression Statement */
/* ========================================================================== */

/*
ExpressionStatement :
	[lookahead not_in {{, function}] Expression ;
*/
JSExpressionStatement ExpressionStatement() :
{
	JSExpression expression;
}
{
	/* TODO [lookahead not_in {{, function}] */
	expression = Expression()
	AutomaticSemicolonInsertion()
	{
		return this.builder.expressionStatement(expression);
	}
}

/* 12.5 The if Statement */
/* ========================================================================== */

/*
IfStatement :
	if ( Expression ) Statement else Statement
	if ( Expression ) Statement
*/
JSIfStatement IfStatement() :
{
	JSExpression condition;
	JSStatement thenStatement;
	JSStatement elseStatement;
}
{
	"if"
	"("
	condition = Expression()
	")"
	thenStatement = Statement()
	(
		LOOKAHEAD("else")
		"else"
		elseStatement = Statement()
		{
			return this.builder.ifThenElseStatement(condition, thenStatement, elseStatement);
		}
	) ?
	{
		return this.builder.ifThenStatement(condition, thenStatement);
	}
}

/* 12.6 Iteration Statements */
/* ========================================================================== */

/*
IterationStatement :
	do Statement while ( Expression );
	while ( Expression ) Statement
	for ( ExpressionNoIn_opt; Expression_opt ; Expression_opt ) Statement
	for ( var VariableDeclarationListNoIn; Expression_opt ; Expression_opt ) Statement
	for ( LeftHandSideExpression in Expression ) Statement
	for ( var VariableDeclarationNoIn in Expression ) Statement
*/
JSIterationStatement IterationStatement() :
{
	JSIterationStatement iterationStatement;
}
{
	iterationStatement = DoWhileStatement()
	{
		return iterationStatement;
	}
|	iterationStatement = WhileStatement()
	{
		return iterationStatement;
	}
|	iterationStatement = ForIterationStatement()
	{
		return iterationStatement;
	}
}

/*
for ( ExpressionNoIn_opt; Expression_opt ; Expression_opt ) Statement
for ( var VariableDeclarationListNoIn; Expression_opt ; Expression_opt ) Statement
for ( LeftHandSideExpression in Expression ) Statement
for ( var VariableDeclarationNoIn in Expression ) Statement
*/
JSIterationStatement ForIterationStatement() :
{
	JSIterationStatement iterationStatement;
}
{
	LOOKAHEAD("for" "(" "var")
	iterationStatement = ForVarOrForVarInIterationStatement()
	{
		return iterationStatement;
	}
|	iterationStatement = ForOrForInIterationStatement()
	{
		return iterationStatement;
	}
}

/*
for ( var VariableDeclarationListNoIn; Expression_opt ; Expression_opt ) Statement
for ( var VariableDeclarationNoIn in Expression ) Statement
*/
JSIterationStatement ForVarOrForVarInIterationStatement() :
{
	JSIterationStatement iterationStatement;
}
{
	LOOKAHEAD("for" "(" "var" VariableDeclarationNoIn() "in")
	iterationStatement = ForVarInStatement()
	{
		return iterationStatement;
	}
|	iterationStatement = ForVarStatement()
	{
		return iterationStatement;
	}

}

/*
for ( ExpressionNoIn_opt; Expression_opt ; Expression_opt ) Statement
for ( LeftHandSideExpression in Expression ) Statement
*/
JSIterationStatement ForOrForInIterationStatement() :
{
	JSIterationStatement iterationStatement;
}
{
	LOOKAHEAD("for" "(" VariableDeclarationNoIn() "in")
	iterationStatement = ForInStatement()
	{
		return iterationStatement;
	}
|	iterationStatement = ForStatement()
	{
		return iterationStatement;
	}
}

/* 12.6.1 The do-while Statement */
/* ========================================================================== */

/*
do Statement while ( Expression );
*/
JSDoWhileStatement DoWhileStatement() :
{
	JSStatement statement;
	JSExpression expression;
}
{
	"do"
	statement = Statement()
	"while"
	"("
	expression = Expression()
	")"
	";"
	{
		return this.builder.doWhileStatement(statement, expression);
	}
}

/* 12.6.2 The while Statement */

/*
while ( Expression ) Statement
*/

JSWhileStatement WhileStatement() :
{
	JSExpression expression;
	JSStatement statement;
}
{
	"while"
	"("
	expression = Expression()
	")"
	statement = Statement()
	{
		return this.builder.whileStatement(expression, statement);
	}
}

/* 12.6.3 The for Statement */
/* ========================================================================== */

/* for (ExpressionNoIn_opt ; Expression_opt ; Expression_opt) Statement */
JSForStatement ForStatement() :
{
	JSExpression expression = null;
	JSExpression test = null;
	JSExpression update = null;
	JSStatement statement;
}
{
	"for"
	"("
		(
			expression = ExpressionNoIn()
		) ?
	";"
		(
			test = Expression()
		) ?
	";"
		(
			update = Expression()
		) ?
	")"
	statement = Statement()
	{
		return this.builder.forStatement(expression, test, update, statement);
	}
}

/* for ( var VariableDeclarationListNoIn ; Expression_opt ; Expression_opt ) Statement */
JSForVarStatement ForVarStatement() :
{
	JSVariableDeclaration[] variableDeclarationList;
	JSExpression test = null;
	JSExpression update = null;
	JSStatement statement;
}
{
	"for"
	"("
	"var"
	variableDeclarationList = VariableDeclarationListNoIn()
	";"
	(
		test = Expression()
	) ?
	";"
	(
		update = Expression()
	) ?
	")"
	statement = Statement()
	{
		return this.builder.forVarStatement(variableDeclarationList, test, update, statement);
	}
}

/* 12.6.4 The for-in Statement */
/* ========================================================================== */

/* for ( LeftHandSideExpression in Expression ) Statement */
JSForInStatement ForInStatement() :
{
	JSLeftHandSideExpression leftHandSideExpression;
	JSExpression expression;
	JSStatement statement ;
}
{
	"for"
	"("
	leftHandSideExpression = LeftHandSideExpression()
	"in"
	expression = Expression()
	")"
	statement = Statement()
	{
		return this.builder.forInStatement(leftHandSideExpression, expression, statement);
	}
}

/* for ( var VariableDeclarationNoIn in Expression ) Statement */
JSForVarInStatement ForVarInStatement() :
{
	JSVariableDeclaration variableDeclaration;
	JSExpression expression;
	JSStatement statement;
}
{
	"for"
	"("
	"var"
	variableDeclaration = VariableDeclarationNoIn()
	"in"
	expression = Expression()
	")"
	statement = Statement()
	{
		return this.builder.forVarInStatement(variableDeclaration, expression, statement);
	} 
}

/* 12.7 The continue Statement */
/* ========================================================================== */

JSLabelReference LabelReference() :
{
	String label;
}
{
	label = Identifier()
	{
		return this.builder.labelReference(label);
	}
}

/*
ContinueStatement :
	continue ;
	continue [no LineTerminator here] Identifier;
*/

JSContinueStatement ContinueStatement() :
{
	JSLabelReference label;
}
{
	"continue"
	(
		/* [LineTerminator here] */
		<LINE_TERMINATOR_TOKEN>
		{
			return this.builder.continueStatement();
		}
	|	/* [no LineTerminator here] */
		";"
		{
			return this.builder.continueStatement();
		}
	|	label = LabelReference()
		AutomaticSemicolonInsertion()
		{
			return this.builder.continueStatement(label);
		}	
	)
}

/* 12.8 The break Statement */
/* ========================================================================== */

/*
BreakStatement :
	break ;
	break [no LineTerminator here] Identifier ;
*/
JSBreakStatement BreakStatement() :
{
	JSLabelReference label;
}
{
	"break"
	(
		/* [LineTerminator here] */
		<LINE_TERMINATOR_TOKEN>
		{
			return this.builder.breakStatement();
		}
	|	/* [no LineTerminator here] */
		";"
		{
			return this.builder.breakStatement();
		}
	|	label = LabelReference()
		AutomaticSemicolonInsertion()
		{
			return this.builder.breakStatement(label);
		}
	)
}

/* 12.9 The return Statement */
/* ========================================================================== */

/*
ReturnStatement :
	return ;
	return [no LineTerminator here] Expression ;
*/
JSReturnStatement ReturnStatement() :
{
	JSExpression expression;
}
{
	"return"
	(
		/* [LineTerminator here] */
		<LINE_TERMINATOR_TOKEN>
		{
			return this.builder.returnStatement();
		}
	|	/* [no LineTerminator here] */
		";"
		{
			return this.builder.returnStatement();
		}
	|	expression = Expression()
		AutomaticSemicolonInsertion()
		{
			return this.builder.returnStatement(expression);
		}
	)
}

/* 12.10 The with Statement */
/* ========================================================================== */

/*
WithStatement :
	with ( Expression ) Statement
*/
JSWithStatement WithStatement() :
{
	JSExpression expression;
	JSStatement statement;
}
{
	"with"
	"("
	expression = Expression()
	")"
	statement = Statement()
	{
		return this.builder.withStatement(expression, statement);
	}
}

/* 12.11 The switch Statement */
/* ========================================================================== */

/*
SwitchStatement :
	switch ( Expression ) CaseBlock

CaseBlock :
	{ CaseClauses_opt }
	{ CaseClauses_opt DefaultClause CaseClauses_opt }

*/
JSSwitchStatement SwitchStatement() :
{
	JSExpression expression;
	JSCaseClause[] firstCaseClauses;
	JSDefaultClause defaultClause;
	JSCaseClause[] secondCaseClauses;
}
{
	"switch"
	"("
	expression = Expression()
	")"
	"{"
	firstCaseClauses = CaseClausesOpt()
	(
		"}"
		{
			return this.builder.switchStatement(expression, firstCaseClauses);
		}
	|	defaultClause = DefaultClause()
		secondCaseClauses = CaseClausesOpt()
		"}"
		{
			return this.builder.switchStatement(expression, firstCaseClauses, defaultClause, secondCaseClauses);
		}
	)
}

/*
CaseClauses :
	CaseClause
	CaseClauses CaseClause
*/
JSCaseClause[] CaseClausesOpt() :
{
	List<JSCaseClause> caseClauses = new LinkedList<JSCaseClause>();
	JSCaseClause caseClause;
}
{
	(
		caseClause = CaseClause()
		{
			caseClauses.add(caseClause);
		}
	) *
	{
		return caseClauses.toArray(new JSCaseClause[caseClauses.size()]);
	}
}


/*
CaseClause :
	case Expression : StatementList_opt
*/
JSCaseClause CaseClause() :
{
	JSExpression expression;
	JSStatement[] statementListOpt;
}
{
	"case"
	expression = Expression()
	":"
	statementListOpt = StatementListOpt()
	{
		return this.builder.caseClause(expression, statementListOpt);
	}
}

/*
DefaultClause :
	default : StatementList_opt
*/
JSDefaultClause DefaultClause() :
{
	JSStatement[] statementList;
}
{
	"default"
	":"
	statementList = StatementListOpt()
	{
		return this.builder.defaultClause(statementList);
	}
}

/* 12.12 Labelled Statements */
/* ========================================================================== */

/*
LabelledStatement :
	Identifier : Statement
*/
JSLabelledStatement LabelledStatement() :
{
	String label;
	JSStatement statement;
}
{
	label = Identifier()
	":"
	statement = Statement()
	{
		return this.builder.labelledStatement(label, statement);
	}
}

/* 12.13 The throw Statement */

/*
ThrowStatement :
	throw [no LineTerminator here] Expression ;
*/
JSThrowStatement ThrowStatement() :
{
	JSExpression expression;
}
{
	"throw"
	/* TODO [no LineTerminator here] */
	expression = Expression()
	AutomaticSemicolonInsertion()
	{
		return this.builder.throwStatement(expression);
	}
}


/* 12.14 The try Statement */
/* ========================================================================== */

/*
TryStatement :
	try Block Catch
	try Block Finally
	try Block Catch Finally

Catch :
	catch ( Identifier ) Block

Finally :
	finally Block
*/
JSTryStatement TryStatement() :
{
	JSBlock tryBlock; 
	String errorName;
	JSBlock catchBlock;
	JSBlock finallyBlock;
}
{
	"try"
	tryBlock = Block()
	(
		"catch"
		"("
			errorName = Identifier()
		")"
		catchBlock = Block()
		(
			"finally"
			finallyBlock = Block()
			{
				return this.builder.tryCatchFinallyStatement(tryBlock, errorName, catchBlock, finallyBlock);
			}
		) ?
		{
			return this.builder.tryCatchStatement(tryBlock, errorName, catchBlock); 
		}
	|	"finally"
		finallyBlock = Block()
		{
			return this.builder.tryFinallyStatement(tryBlock, finallyBlock);
		}
	)
}

/* 12.15 The debugger statement */
/* ========================================================================== */

/*
DebuggerStatement :
	debugger ;
*/
JSDebuggerStatement DebuggerStatement() :
{}
{
	"debugger"
	";"
	{
		return this.builder.debuggerStatement();
	}
}

/* 13 Function Definition */
/* ========================================================================== */

/*
FunctionDeclaration :
	function Identifier ( FormalParameterList_opt ) { FunctionBody }
*/
JSFunctionDeclaration FunctionDeclaration() :
{
	String functionName;
	String[] formalParameterList;
	JSSourceElement[] functionBody;
}
{
	"function"
	functionName = Identifier()
	"("
	formalParameterList = FormalParameterListOpt()
	")"
	"{"
	functionBody = FunctionBody()
	"}"
	{
		return this.builder.functionDeclaration(functionName, formalParameterList, functionBody);
	}
}	

/*	
FunctionExpression :
	function Identifier_opt ( FormalParameterList_opt ) { FunctionBody }
*/
JSFunctionExpression FunctionExpression() :
{
	String functionName;
	String[] formalParameterList;
	JSSourceElement[] functionBody;
}
{
	"function"
	(
		functionName = Identifier()
		"("
		formalParameterList = FormalParameterListOpt()
		")"
		"{"
		functionBody = FunctionBody()
		"}"
		{
			return this.builder.functionExpression(functionName, formalParameterList, functionBody);
		}
	|	"("
		formalParameterList = FormalParameterListOpt()
		")"
		"{"
		functionBody = FunctionBody()
		"}" {SetState(NO_REGULAR_EXPRESSION_HERE);}
		{
			return this.builder.functionExpression(formalParameterList, functionBody);
		}
	)
}

/*
FormalParameterList :
	Identifier
	FormalParameterList , Identifier
*/
String[] FormalParameterListOpt() :
{
	List<String> formalParameterList = new LinkedList<String>();
	String identifier;
}
{
	(
		identifier = Identifier()
		{
			formalParameterList.add(identifier);
		}
		(
			","
			identifier = Identifier()
			{
				formalParameterList.add(identifier);
			}
		) *
	)?
	{
		return formalParameterList.toArray(new String[formalParameterList.size()]);
	}
}

/*
FunctionBody :
	SourceElements_opt
*/
JSSourceElement[] FunctionBody() :
{
	JSSourceElement[] functionBody;
}
{
	functionBody = SourceElementsOpt()
	{
		return functionBody;
	}
}

/* 14 Program */
/* ========================================================================== */

/*
Program :
  SourceElements_opt
*/ 
JSProgram Program() :
{
	JSSourceElement[] sourceElements;
}
{
	sourceElements = SourceElementsOpt()
	<EOF>
	{
		return this.builder.program(sourceElements);
	}
}

/*
SourceElements :
	SourceElement
	SourceElements SourceElement
*/
JSSourceElement[] SourceElementsOpt() :
{
	List<JSSourceElement> sourceElements = new LinkedList<JSSourceElement>();
	JSSourceElement sourceElement;
}
{
	(
		sourceElement = SourceElement()
		{
			sourceElements.add(sourceElement);
		}
	) *
	{
		return sourceElements.toArray(new JSSourceElement[sourceElements.size()]);
	}
}

/*
SourceElement :
	Statement
	FunctionDeclaration
*/
JSSourceElement SourceElement() :
{
	JSSourceElement sourceElement;
}
{
	LOOKAHEAD("function" <IDENTIFIER_NAME> "(")
	sourceElement = FunctionDeclaration()
	{
		return sourceElement;
	}
|	sourceElement = Statement()
	{
		return sourceElement;
	}
}

JAVACODE
private void AutomaticSemicolonInsertion() {
	Token token = getToken(1);
	if (token.kind == SEMICOLON) {
		token = getNextToken();
	} else if (token.specialToken != null) {
		if (!TokenUtils.precededByLineTerminator(token)) {
            throw generateParseException();
		}
	} else if ((token.kind != EOF) && (token.kind!=RBRACE)) {
		throw generateParseException();
	}
}

JAVACODE
private void SetState(int state) {
  if (state != token_source.curLexState) {
    Token root = new Token(), last=root;
    root.next = null;

    // First, we build a list of tokens to push back, in backwards order
    while (token.next != null) {
      Token t = token;
      // Find the token whose token.next is the last in the chain
      while (t.next != null && t.next.next != null)
        t = t.next;

      // put it at the end of the new chain
      last.next = t.next;
      last = t.next;

      // If there are special tokens, these go before the regular tokens,
      // so we want to push them back onto the input stream in the order
      // we find them along the specialToken chain.

      if (t.next.specialToken != null) {
        Token tt=t.next.specialToken;
        while (tt != null) {
          last.next = tt;
          last = tt;
          tt.next = null;
          tt = tt.specialToken;
        }
      }
      t.next = null;
    };

    while (root.next != null) {
      token_source.backup(root.next.image.length());
      root.next = root.next.next;
    }
    jj_ntk = -1;
    token_source.SwitchTo(state);
  }
}

TOKEN_MGR_DECLS : {
	int lexicalStateBeforeMultiLineComment;
	// Required by SetState
	void backup(int n) { input_stream.backup(n); }
}