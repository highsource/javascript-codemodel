options {

	STATIC = false;

	DEBUG_PARSER = false;

	DEBUG_TOKEN_MANAGER = false;

	JAVA_UNICODE_ESCAPE = false;

	UNICODE_INPUT = true;

}

PARSER_BEGIN(LTokenCasesParser)

package org.hisrc.jscm.parser.testing.lexical;

import java.util.List;
import java.util.LinkedList;

import org.hisrc.jscm.parser.testing.lexical.LToken;
import org.hisrc.jscm.parser.testing.lexical.LTokenCase;
import org.hisrc.jscm.parser.testing.lexical.LTokenFactory;

public class LTokenCasesParser {
	
	private LTokenFactory tokenFactory;
	
	public void setTokenFactory(LTokenFactory tokenFactory)
	{
		this.tokenFactory = tokenFactory;
	} 

}
PARSER_END(LTokenCasesParser)

SPECIAL_TOKEN :
{
	<WHITE_SPACE:
		<TAB>
	|	<VT>
	|	<FF>
	|	<SP>
	|	<NBSP>
	>
|	/* Tab */
	<#TAB:
		/* TODO is it correct here? */
		"\u0009"
	|	/* TODO is it correct here? */
		"\t"
	>
|	/* Vertical Tab */
	<#VT:
		/* TODO is it correct here? */
		"\u000B"
	>
|	/* Form Feed */ 
	<#FF:
		/* TODO is it correct here? */
		"\u000C"
	|	/* TODO is it correct here? */
		"\f"
	>
|	/* Space */
	<#SP:
		"\u0020"
	|	" "
	> 
|	/* No-break space */
	<#NBSP:
		"\u00A0"
	>
}

TOKEN :
{
	<L1_BULLET : "*">
|	<L2_BULLET : "  *">
|	<GRAVIS	: "`">
|	<STRING	:
		"`"
		(
			~["`"]
		) *
		"`"
	>
}

SPECIAL_TOKEN :
{
	<LINE_TERMINATOR:
		<LF>
	|	<CR>
	|	<LF><CR>
	>
|	/* Line Feed */
	<#LF:
		"\n"> 
|	/* Carriage Return */
	<#CR:
		"\r"> 
}

List<LTokenCase> LTokenCases() :
{
	LTokenCase tokenCase;
	List<LTokenCase> tokenCases = new LinkedList<LTokenCase>();
}
{
	(
		tokenCase = LTokenCase()
		{
			tokenCases.add(tokenCase);
		}
	) *
	<EOF>
	{
		return tokenCases;
	}
}

LTokenCase LTokenCase() :
{
	Token t;
	String input;
	LToken token;
	List<LToken> tokens = new LinkedList<LToken>();
}
{
	<L1_BULLET> t=<STRING>
	{
		input = t.image.substring(1, t.image.length() - 1);
	}
	(
		token = LToken()
		{
			tokens.add(token);
		}
	) *
	{
		return new LTokenCase(input, tokens);	
	}
}
LToken LToken() :
{
	Token idToken;
	String id;
	Token imageToken;
	String image;
}
{
	<L2_BULLET>
	idToken=<STRING>
	{
		id = idToken.image.substring(1, idToken.image.length() - 1);
	}
	imageToken=<STRING>
	{
		image = imageToken.image.substring(1, imageToken.image.length() - 1);
		return this.tokenFactory.createToken(id, image);
	}
}